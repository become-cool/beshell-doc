import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,b as s,e as i,a as r,d as n,w as e,r as o,o as u}from"./app-CbJW3NnK.js";const g={};function m(k,a){const l=o("CodeTabs"),c=o("RouteLink");return u(),h("div",null,[a[12]||(a[12]=s("h1",{id:"模块-wifi",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#模块-wifi"},[s("span",null,"模块: WiFi")])],-1)),a[13]||(a[13]=s("p",null,[n("导入 "),s("code",null,"WiFi"),n(" 模块：")],-1)),i(l,{id:"6",data:[{id:"在.js文件中"},{id:"在REPL命令行下"}]},{title0:e(({value:p,isActive:t})=>a[0]||(a[0]=[n("在.js文件中")])),title1:e(({value:p,isActive:t})=>a[1]||(a[1]=[n("在REPL命令行下")])),tab0:e(({value:p,isActive:t})=>a[2]||(a[2]=[s("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token keyword"},"as"),n(" wifi "),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'WiFi'"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1)])),tab1:e(({value:p,isActive:t})=>a[3]||(a[3]=[s("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token keyword"},"import"),n(` WiFi
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1)])),_:1}),s("blockquote",null,[s("p",null,[a[5]||(a[5]=n("WiFi 模块的例子请参考：")),i(c,{to:"/guide/wifi.html"},{default:e(()=>a[4]||(a[4]=[n("用 JavaScript 连接 WiFi")])),_:1})])]),a[14]||(a[14]=r('<p>系统在初次 <code>import</code> WiFi 模块时，会自动初始化所有相关的硬件资源。</p><h2 id="模块函数" tabindex="-1"><a class="header-anchor" href="#模块函数"><span>模块函数</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="函数-start" tabindex="-1"><a class="header-anchor" href="#函数-start"><span><span class="member-header function"></span> 函数 start</span></a></h3><p>原型: start ()</p><p>启动 WiFi 硬件，所有 wifi 模块里的 api 都需要在 <code>start()</code> 之后才能调用。</p><p><code>startAP</code> 和 <code>connect</code> 会自动调用 <code>start()</code> ，因此一般情况下，可以直接使用 startAP 或 connect 。</p><p>返回 0 表示成功, 返回非 0 表示错误代码</p><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-stop" tabindex="-1"><a class="header-anchor" href="#函数-stop"><span><span class="member-header function"></span> 函数 stop</span></a></h3><p>原型: stop ()</p><p>停止 WiFi 硬件。</p><p>返回 0 表示成功, 返回非 0 表示错误代码</p><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-isready" tabindex="-1"><a class="header-anchor" href="#函数-isready"><span><span class="member-header function"></span> 函数 isReady</span></a></h3><p>原型: isReady ()</p><p>返回是否已经 start()</p><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-startap" tabindex="-1"><a class="header-anchor" href="#函数-startap"><span><span class="member-header function"></span> 函数 startAP</span></a></h3><p>原型: startAP (ssid:string, password:string)</p><p>启动 WiFi 热点</p><blockquote><p>该函数会自动调用 <code>start()</code> 启动 WiFi 模块。</p></blockquote><p>异步返回 Promise&lt;bool&gt; 表示成功或者失败</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">ssid</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>WiFi 热点名称</p></li><li><p><span style="color:#007acc;">password</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>WiFi 热点密码</p></li></ul><h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Promise&lt;bool&gt;</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-stopap" tabindex="-1"><a class="header-anchor" href="#函数-stopap"><span><span class="member-header function"></span> 函数 stopAP</span></a></h3><p>原型: stopAP ()</p><p>停止 WiFi 热点</p><p>异步返回 Promise&lt;bool&gt; 表示成功或者失败</p><h4 id="返回值-4" tabindex="-1"><a class="header-anchor" href="#返回值-4"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Promise&lt;bool&gt;</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-connect" tabindex="-1"><a class="header-anchor" href="#函数-connect"><span><span class="member-header function"></span> 函数 connect</span></a></h3><p>原型: connect (ssid:string, password:string, retry:number=3, retryDuration:number=2000)</p><p>做为 WiFi STA 连接到热点</p><blockquote><p>该函数会自动调用 <code>start()</code> 启动 WiFi 模块。</p></blockquote><p>异步返回 Promise&lt;bool&gt; 表示成功或者失败</p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">ssid</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>WiFi 热点名称</p></li><li><p><span style="color:#007acc;">password</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>WiFi 热点密码</p></li><li><p><span style="color:#007acc;">retry=3</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>默认值</strong></span>3</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>连接失败重试次数</p></li><li><p><span style="color:#007acc;">retryDuration=2000</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>默认值</strong></span>2000</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>连接重试间隔时间，单位 ms</p></li></ul><h4 id="返回值-5" tabindex="-1"><a class="header-anchor" href="#返回值-5"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Promise&lt;bool&gt;</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-disconnect" tabindex="-1"><a class="header-anchor" href="#函数-disconnect"><span><span class="member-header function"></span> 函数 disconnect</span></a></h3><p>原型: disconnect ()</p><p>断开 WiFi STA 的连接</p><p>异步返回 Promise&lt;bool&gt; 表示成功或者失败</p><p>未连接状态下，直接返回 Promise&lt;true&gt;</p><h4 id="返回值-6" tabindex="-1"><a class="header-anchor" href="#返回值-6"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Promise&lt;bool&gt;</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-isconnecting" tabindex="-1"><a class="header-anchor" href="#函数-isconnecting"><span><span class="member-header function"></span> 函数 isConnecting</span></a></h3><p>原型: isConnecting ()</p><p>返回是否正在连接中</p><h4 id="返回值-7" tabindex="-1"><a class="header-anchor" href="#返回值-7"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-status" tabindex="-1"><a class="header-anchor" href="#函数-status"><span><span class="member-header function"></span> 函数 status</span></a></h3><p>原型: status (type:string=&quot;apsta&quot;)</p><p>返回 AP/STA 详细状态</p><p>返回对象的格式：</p>',77)),i(l,{id:"290",data:[{id:"apsta"},{id:"ap"},{id:"sta"}]},{title0:e(({value:p,isActive:t})=>a[6]||(a[6]=[n("apsta")])),title1:e(({value:p,isActive:t})=>a[7]||(a[7]=[n("ap")])),title2:e(({value:p,isActive:t})=>a[8]||(a[8]=[n("sta")])),tab0:e(({value:p,isActive:t})=>a[9]||(a[9]=[s("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token string-property property"},'"ap"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token string-property property"},'"ssid"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"password"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"started"'),s("span",{class:"token operator"},":"),n(" bool"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"ip"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"netmask"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"gw"'),s("span",{class:"token operator"},":"),n(`string
     `),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"sta"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{"),n(`
        `),s("span",{class:"token string-property property"},'"ssid"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"password"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"started"'),s("span",{class:"token operator"},":"),n(" bool"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"connected"'),s("span",{class:"token operator"},":"),n(" bool"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"authmode"'),s("span",{class:"token operator"},":"),n("number"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"ip"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"netmask"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
        `),s("span",{class:"token string-property property"},'"gw"'),s("span",{class:"token operator"},":"),n(`string
     `),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token punctuation"},","),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:p,isActive:t})=>a[10]||(a[10]=[s("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token string-property property"},'"ap"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token string-property property"},'"ssid"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"password"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"started"'),s("span",{class:"token operator"},":"),n(" bool"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"ip"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"netmask"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"gw"'),s("span",{class:"token operator"},":"),n(`string
`),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token punctuation"},","),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab2:e(({value:p,isActive:t})=>a[11]||(a[11]=[s("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[s("pre",{class:"language-javascript"},[s("code",null,[s("span",{class:"token string-property property"},'"sta"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{"),n(`
    `),s("span",{class:"token string-property property"},'"ssid"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"password"'),s("span",{class:"token operator"},":"),n(" string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"started"'),s("span",{class:"token operator"},":"),n(" bool"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"connected"'),s("span",{class:"token operator"},":"),n(" bool"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"authmode"'),s("span",{class:"token operator"},":"),n("number"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"ip"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"netmask"'),s("span",{class:"token operator"},":"),n("string"),s("span",{class:"token punctuation"},","),n(`
    `),s("span",{class:"token string-property property"},'"gw"'),s("span",{class:"token operator"},":"),n(`string
`),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token punctuation"},","),n(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[15]||(a[15]=r(`<h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">type=&quot;apsta&quot;</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>默认值</strong></span>&quot;apsta&quot;</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>可选值：&quot;apsta&quot;、&quot;ap&quot;、&quot;sta&quot;</p></li></ul><h4 id="返回值-8" tabindex="-1"><a class="header-anchor" href="#返回值-8"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-waitip" tabindex="-1"><a class="header-anchor" href="#函数-waitip"><span><span class="member-header function"></span> 函数 waitIP</span></a></h3><p>原型: waitIP ()</p><p>等待从 DHCP 获取 IP 地址</p><p>异步返回 Promise&lt;object|false&gt; ，如果失败范围 false，成功则返回包括 ip 的 sta status 对象。</p><p>参考 <code>status()</code> 函数的返回值。</p><h4 id="返回值-9" tabindex="-1"><a class="header-anchor" href="#返回值-9"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Promise&lt;object, false&gt;</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-setps" tabindex="-1"><a class="header-anchor" href="#函数-setps"><span><span class="member-header function"></span> 函数 setPS</span></a></h3><p>原型: setPS (mode:0|1|2)</p><p>设置 wifi 的节能模式 (PowerSafe)</p><p>参数 mode :</p><ul><li>0 关闭节能模式</li><li>1 最小</li><li>2 最大</li></ul><p>关闭节能模式，可以避免 WiFi 休眠，提供通讯的效率和稳定性，但会增加功耗</p><p>返回 0 表示 api 调用成功, 返回非 0 表示错误代码</p><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">mode</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>0, 1, 2</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span></p></li></ul><h4 id="返回值-10" tabindex="-1"><a class="header-anchor" href="#返回值-10"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-setmode" tabindex="-1"><a class="header-anchor" href="#函数-setmode"><span><span class="member-header function"></span> 函数 setMode</span></a></h3><p>原型: setMode (mode:0|1|2|3)</p><p>设置 wifi 的工作模式，<code>startAP</code> 和 <code>connect</code> 会自动设置工作模式，因此通常不需要直接使用这个 api</p><p>参数 mode :</p><ul><li>0 未启动</li><li>1 STA</li><li>2 AP</li><li>3 STA + AP</li></ul><p>返回 0 表示 api 调用成功, 返回非 0 表示错误代码</p><h4 id="参数-4" tabindex="-1"><a class="header-anchor" href="#参数-4"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">mode</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>0, 1, 2, 3</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span></p></li></ul><h4 id="返回值-11" tabindex="-1"><a class="header-anchor" href="#返回值-11"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-getmode" tabindex="-1"><a class="header-anchor" href="#函数-getmode"><span><span class="member-header function"></span> 函数 getMode</span></a></h3><p>原型: getMode ()</p><p>返回设置 wifi 的工作模式</p><ul><li>0 未启动</li><li>1 STA</li><li>2 AP</li><li>3 STA + AP</li></ul><h4 id="返回值-12" tabindex="-1"><a class="header-anchor" href="#返回值-12"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-setapconfig" tabindex="-1"><a class="header-anchor" href="#函数-setapconfig"><span><span class="member-header function"></span> 函数 setAPConfig</span></a></h3><p>原型: setAPConfig (config:object)</p><p>设置 wifi AP 模式的参数, <code>startAP</code> 会自动配置 AP 参数，需要对设备更详细的设置时，可以使用这个 api</p><p>参数 mode :</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">ssid</span><span class="token operator">:</span> string <span class="token punctuation">,</span>
    password<span class="token operator">?</span><span class="token operator">:</span> string <span class="token punctuation">,</span>
    <span class="token string">&quot;threshold.authmode&quot;</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span> <span class="token punctuation">,</span>
    channel<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">13</span> <span class="token punctuation">,</span>
    max_connection<span class="token operator">?</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token comment">// 最大客户连接数</span>
    ssid_hidden<span class="token operator">?</span><span class="token operator">:</span>bool <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">,</span>    <span class="token comment">// 热点不会被扫描到</span>
    beacon_interval<span class="token operator">?</span><span class="token operator">:</span> number <span class="token punctuation">,</span>
    pairwise_cipher<span class="token operator">?</span><span class="token operator">:</span> number <span class="token punctuation">,</span>
    ftm_responder<span class="token operator">?</span><span class="token operator">:</span> bool <span class="token punctuation">,</span>        <span class="token comment">// Enable FTM Responder mode</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>password</code> 为空, 则 <code>threshold.authmode</code> 自动设置为 <code>WIFI_AUTH_OPEN</code></p><p>返回 0 表示 api 调用成功, 返回非 0 表示错误代码</p><h4 id="参数-5" tabindex="-1"><a class="header-anchor" href="#参数-5"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">config</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>object</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span></p></li></ul><h4 id="返回值-13" tabindex="-1"><a class="header-anchor" href="#返回值-13"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-setstaconfig" tabindex="-1"><a class="header-anchor" href="#函数-setstaconfig"><span><span class="member-header function"></span> 函数 setStaConfig</span></a></h3><p>原型: setStaConfig (config:object)</p><p>设置 wifi STA 模式的连接参数, <code>connect</code> 会自动配置连接参数，需要使用更详细的连接参数时使用此 API</p><p>参数 mode :</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">ssid</span><span class="token operator">:</span> string <span class="token punctuation">,</span>
    password<span class="token operator">?</span><span class="token operator">:</span> string <span class="token punctuation">,</span>
    <span class="token string">&quot;threshold.authmode&quot;</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">8</span> <span class="token punctuation">,</span>
    scan_method<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span> <span class="token punctuation">,</span>
    channel<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">13</span> <span class="token punctuation">,</span>
    listen_interval<span class="token operator">?</span><span class="token operator">:</span>number <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">,</span>
    sort_method<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>       <span class="token comment">// sort the connect AP in the list by rssi or security mode</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>password</code> 为空, 则 <code>threshold.authmode</code> 自动设置为 <code>WIFI_AUTH_OPEN</code></p><p>返回 0 表示 api 调用成功, 返回非 0 表示错误代码</p><h4 id="参数-6" tabindex="-1"><a class="header-anchor" href="#参数-6"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">config</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>object</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span></p></li></ul><h4 id="返回值-14" tabindex="-1"><a class="header-anchor" href="#返回值-14"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-getconfig" tabindex="-1"><a class="header-anchor" href="#函数-getconfig"><span><span class="member-header function"></span> 函数 getConfig</span></a></h3><p>原型: getConfig (mode:1|2)</p><p>返回 wifi 的工作参数</p><p>返回的对象可参考 <code>setStaConfig()</code> 和 <code>setAPConfig()</code> 的 <code>mode</code> 参数</p><h4 id="参数-7" tabindex="-1"><a class="header-anchor" href="#参数-7"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">mode</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>1, 2</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span> 1代表 sta , 2代表 ap</p></li></ul><h4 id="返回值-15" tabindex="-1"><a class="header-anchor" href="#返回值-15"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-getipinfo" tabindex="-1"><a class="header-anchor" href="#函数-getipinfo"><span><span class="member-header function"></span> 函数 getIpInfo</span></a></h3><p>原型: getIpInfo (type:number)</p><p>返回 AP/STA 的 IP</p><p>function 返回一个对象, 包含 ip, netmask, gw 信息</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">ip</span><span class="token operator">:</span>string<span class="token punctuation">,</span>
    <span class="token literal-property property">netmask</span><span class="token operator">:</span>string<span class="token punctuation">,</span>
    <span class="token literal-property property">gw</span><span class="token operator">:</span>string
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数-8" tabindex="-1"><a class="header-anchor" href="#参数-8"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">type</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>1代表 sta, 2代表 ap</p></li></ul><h4 id="返回值-16" tabindex="-1"><a class="header-anchor" href="#返回值-16"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-sethostname" tabindex="-1"><a class="header-anchor" href="#函数-sethostname"><span><span class="member-header function"></span> 函数 setHostname</span></a></h3><p>原型: setHostname (nane:string)</p><p>返回设置 wifi 的在局域网中可被显示的主机名</p><h4 id="参数-9" tabindex="-1"><a class="header-anchor" href="#参数-9"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">nane</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span></p></li></ul><h4 id="返回值-17" tabindex="-1"><a class="header-anchor" href="#返回值-17"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-allsta" tabindex="-1"><a class="header-anchor" href="#函数-allsta"><span><span class="member-header function"></span> 函数 allSta</span></a></h3><p>原型: allSta ()</p><p>返回所有连接到本机AP的客户机</p><p>返回对象数组, 每个对象包含 mac 和 rssi 信息</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">mac</span><span class="token operator">:</span> <span class="token string">&quot;xx:xx&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">rssi</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rssi</code> 值范围 -100 ~ 0, 单位为 dBm，表示信号强度，越大(绝对值越小)表示信号越强。</p><h4 id="返回值-18" tabindex="-1"><a class="header-anchor" href="#返回值-18"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>{mac:string,rssi:string}[]</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-scan" tabindex="-1"><a class="header-anchor" href="#函数-scan"><span><span class="member-header function"></span> 函数 scan</span></a></h3><p>原型: scan ()</p><p>扫描周围的 WiFi 热点，必须在 STA 模式下运行</p><p>异步返回 Promise&lt;object[]&gt;</p><p>返回对象数组的格式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">bssid</span><span class="token operator">:</span>string <span class="token punctuation">,</span>
        <span class="token literal-property property">ssid</span><span class="token operator">:</span>string <span class="token punctuation">,</span>
        <span class="token literal-property property">channel</span><span class="token operator">:</span>number <span class="token punctuation">,</span>
        <span class="token literal-property property">rssi</span><span class="token operator">:</span>number <span class="token punctuation">,</span>
        <span class="token literal-property property">authmode</span><span class="token operator">:</span>number <span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回值-19" tabindex="-1"><a class="header-anchor" href="#返回值-19"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Promise&lt;object[]&gt;</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-scanstop" tabindex="-1"><a class="header-anchor" href="#函数-scanstop"><span><span class="member-header function"></span> 函数 scanStop</span></a></h3><p>原型: scanStop ()</p><p>停止AP扫描</p><h4 id="返回值-20" tabindex="-1"><a class="header-anchor" href="#返回值-20"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-isscanning" tabindex="-1"><a class="header-anchor" href="#函数-isscanning"><span><span class="member-header function"></span> 函数 isScanning</span></a></h3><p>原型: isScanning ()</p><p>返回 AP 扫描是否正在进行</p><h4 id="返回值-21" tabindex="-1"><a class="header-anchor" href="#返回值-21"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-scanrecords" tabindex="-1"><a class="header-anchor" href="#函数-scanrecords"><span><span class="member-header function"></span> 函数 scanRecords</span></a></h3><p>原型: scanRecords ()</p><p>取回 AP 扫描的结果</p><p>返回的数组格式:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">bssid</span><span class="token operator">:</span>string <span class="token punctuation">,</span>
         <span class="token literal-property property">ssid</span><span class="token operator">:</span>string <span class="token punctuation">,</span>
         <span class="token literal-property property">channel</span><span class="token operator">:</span>number <span class="token punctuation">,</span>
         <span class="token literal-property property">rssi</span><span class="token operator">:</span>number <span class="token punctuation">,</span>
         <span class="token literal-property property">authmode</span><span class="token operator">:</span>number <span class="token punctuation">,</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回值-22" tabindex="-1"><a class="header-anchor" href="#返回值-22"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object[]</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-stastarted" tabindex="-1"><a class="header-anchor" href="#函数-stastarted"><span><span class="member-header function"></span> 函数 staStarted</span></a></h3><p>原型: staStarted ()</p><p>返回 WiFi STA 模式是否启动</p><h4 id="返回值-23" tabindex="-1"><a class="header-anchor" href="#返回值-23"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-staconnected" tabindex="-1"><a class="header-anchor" href="#函数-staconnected"><span><span class="member-header function"></span> 函数 staConnected</span></a></h3><p>原型: staConnected ()</p><p>返回 WiFi STA 是否已经连接</p><h4 id="返回值-24" tabindex="-1"><a class="header-anchor" href="#返回值-24"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-apstarted" tabindex="-1"><a class="header-anchor" href="#函数-apstarted"><span><span class="member-header function"></span> 函数 apStarted</span></a></h3><p>原型: apStarted ()</p><p>返回 WiFi AP 模式是否启用</p><h4 id="返回值-25" tabindex="-1"><a class="header-anchor" href="#返回值-25"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p>`,167))])}const x=d(g,[["render",m],["__file","wifi.html.vue"]]),v=JSON.parse('{"path":"/api/wifi.html","title":"模块: WiFi","lang":"zh-CN","frontmatter":{"headerDepth":2,"description":"模块: WiFi 导入 WiFi 模块： WiFi 模块的例子请参考： 系统在初次 import WiFi 模块时，会自动初始化所有相关的硬件资源。 模块函数 函数 start 原型: start () 启动 WiFi 硬件，所有 wifi 模块里的 api 都需要在 start() 之后才能调用。 startAP 和 connect 会自动调用 st...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/api/wifi.html"}],["meta",{"property":"og:title","content":"模块: WiFi"}],["meta",{"property":"og:description","content":"模块: WiFi 导入 WiFi 模块： WiFi 模块的例子请参考： 系统在初次 import WiFi 模块时，会自动初始化所有相关的硬件资源。 模块函数 函数 start 原型: start () 启动 WiFi 硬件，所有 wifi 模块里的 api 都需要在 start() 之后才能调用。 startAP 和 connect 会自动调用 st..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T09:42:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T09:42:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块: WiFi\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-31T09:42:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块函数","slug":"模块函数","link":"#模块函数","children":[{"level":3,"title":"函数  start","slug":"函数-start","link":"#函数-start","children":[]},{"level":3,"title":"函数  stop","slug":"函数-stop","link":"#函数-stop","children":[]},{"level":3,"title":"函数  isReady","slug":"函数-isready","link":"#函数-isready","children":[]},{"level":3,"title":"函数  startAP","slug":"函数-startap","link":"#函数-startap","children":[]},{"level":3,"title":"函数  stopAP","slug":"函数-stopap","link":"#函数-stopap","children":[]},{"level":3,"title":"函数  connect","slug":"函数-connect","link":"#函数-connect","children":[]},{"level":3,"title":"函数  disconnect","slug":"函数-disconnect","link":"#函数-disconnect","children":[]},{"level":3,"title":"函数  isConnecting","slug":"函数-isconnecting","link":"#函数-isconnecting","children":[]},{"level":3,"title":"函数  status","slug":"函数-status","link":"#函数-status","children":[]},{"level":3,"title":"函数  waitIP","slug":"函数-waitip","link":"#函数-waitip","children":[]},{"level":3,"title":"函数  setPS","slug":"函数-setps","link":"#函数-setps","children":[]},{"level":3,"title":"函数  setMode","slug":"函数-setmode","link":"#函数-setmode","children":[]},{"level":3,"title":"函数  getMode","slug":"函数-getmode","link":"#函数-getmode","children":[]},{"level":3,"title":"函数  setAPConfig","slug":"函数-setapconfig","link":"#函数-setapconfig","children":[]},{"level":3,"title":"函数  setStaConfig","slug":"函数-setstaconfig","link":"#函数-setstaconfig","children":[]},{"level":3,"title":"函数  getConfig","slug":"函数-getconfig","link":"#函数-getconfig","children":[]},{"level":3,"title":"函数  getIpInfo","slug":"函数-getipinfo","link":"#函数-getipinfo","children":[]},{"level":3,"title":"函数  setHostname","slug":"函数-sethostname","link":"#函数-sethostname","children":[]},{"level":3,"title":"函数  allSta","slug":"函数-allsta","link":"#函数-allsta","children":[]},{"level":3,"title":"函数  scan","slug":"函数-scan","link":"#函数-scan","children":[]},{"level":3,"title":"函数  scanStop","slug":"函数-scanstop","link":"#函数-scanstop","children":[]},{"level":3,"title":"函数  isScanning","slug":"函数-isscanning","link":"#函数-isscanning","children":[]},{"level":3,"title":"函数  scanRecords","slug":"函数-scanrecords","link":"#函数-scanrecords","children":[]},{"level":3,"title":"函数  staStarted","slug":"函数-stastarted","link":"#函数-stastarted","children":[]},{"level":3,"title":"函数  staConnected","slug":"函数-staconnected","link":"#函数-staconnected","children":[]},{"level":3,"title":"函数  apStarted","slug":"函数-apstarted","link":"#函数-apstarted","children":[]}]}],"git":{"createdTime":1714757277000,"updatedTime":1717148524000,"contributors":[{"name":"alee","email":"alee@chou.im","commits":3},{"name":"alee","email":"alee_zhou@seminstructs.com","commits":1}]},"readingTime":{"minutes":9.24,"words":2771},"filePathRelative":"api/wifi.md","localizedDate":"2024年5月4日","autoDesc":true}');export{x as comp,v as data};
