import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as p}from"./app-CbJW3NnK.js";const t={};function o(r,e){return p(),n("div",null,e[0]||(e[0]=[a(`<h1 id="模块-process" tabindex="-1"><a class="header-anchor" href="#模块-process"><span>模块: process</span></a></h1><blockquote><p>该模块不需要 import，可通过全局变量 <code>process</code> 访问</p></blockquote><p>系统功能模块, 命名为 <code>process</code> 是为了和 nodejs 的习惯一致</p><h2 id="模块函数" tabindex="-1"><a class="header-anchor" href="#模块函数"><span>模块函数</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="函数-reboot" tabindex="-1"><a class="header-anchor" href="#函数-reboot"><span><span class="member-header function"></span> 函数 reboot</span></a></h3><p>原型: reboot ()</p><p>重启系统</p><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-readefuse" tabindex="-1"><a class="header-anchor" href="#函数-readefuse"><span><span class="member-header function"></span> 函数 readEFUSE</span></a></h3><p>原型: readEFUSE (field:number)</p><p>从一次性写入区(只读区) efuse 读取数据</p><p>ESP32 一共8个32位寄存器共自定义使用</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">field</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>要读取的 efuse 块和位，范围 0-7</p></li></ul><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p>读取到的 efuse 数据 (32位整数)</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-usage" tabindex="-1"><a class="header-anchor" href="#函数-usage"><span><span class="member-header function"></span> 函数 usage</span></a></h3><p>原型: usage ()</p><p>内存使用情况</p><p>返回对象的格式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;heap&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;used&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;free&quot;</span><span class="token operator">:</span> number
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;psram&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;used&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;free&quot;</span><span class="token operator">:</span> number
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;dma&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;used&quot;</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
    <span class="token string-property property">&quot;free&quot;</span><span class="token operator">:</span> number
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>total</code> 表示总内存大小，<code>used</code> 表示已用内存大小，<code>free</code> 表示剩余内存大小。</p><p>psram 表示伪静态内存，通常是外挂的IC存储器；</p><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-top" tabindex="-1"><a class="header-anchor" href="#函数-top"><span><span class="member-header function"></span> 函数 top</span></a></h3><p>原型: top ()</p><p>打印系统任务运行状态，包括任务名称、状态、优先级、栈大小、任务ID、运行次数、运行时间等信息。</p><h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-settime" tabindex="-1"><a class="header-anchor" href="#函数-settime"><span><span class="member-header function"></span> 函数 setTime</span></a></h3><p>原型: setTime (ms:number)</p><p>设置系统时间</p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">ms</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>UNIX时间戳，单位为毫秒</p></li></ul><h4 id="返回值-4" tabindex="-1"><a class="header-anchor" href="#返回值-4"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-settimezoneoffset" tabindex="-1"><a class="header-anchor" href="#函数-settimezoneoffset"><span><span class="member-header function"></span> 函数 setTimezoneOffset</span></a></h3><p>原型: setTimezoneOffset (minute:number)</p><p>设置系统时区时间偏置量(分钟)</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span><span class="token function">setTimezoneOffset</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置时区为东八区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">minute</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>时间偏置分钟</p></li></ul><h4 id="返回值-5" tabindex="-1"><a class="header-anchor" href="#返回值-5"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p>`,59)]))}const c=s(t,[["render",o],["__file","process.html.vue"]]),d=JSON.parse('{"path":"/api/process.html","title":"模块: process","lang":"zh-CN","frontmatter":{"headerDepth":2,"description":"模块: process 该模块不需要 import，可通过全局变量 process 访问 系统功能模块, 命名为 process 是为了和 nodejs 的习惯一致 模块函数 函数 reboot 原型: reboot () 重启系统 返回值: 类型undefined 函数 readEFUSE 原型: readEFUSE (field:number) 从...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/api/process.html"}],["meta",{"property":"og:title","content":"模块: process"}],["meta",{"property":"og:description","content":"模块: process 该模块不需要 import，可通过全局变量 process 访问 系统功能模块, 命名为 process 是为了和 nodejs 的习惯一致 模块函数 函数 reboot 原型: reboot () 重启系统 返回值: 类型undefined 函数 readEFUSE 原型: readEFUSE (field:number) 从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T14:12:34.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-05T14:12:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块: process\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T14:12:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块函数","slug":"模块函数","link":"#模块函数","children":[{"level":3,"title":"函数  reboot","slug":"函数-reboot","link":"#函数-reboot","children":[]},{"level":3,"title":"函数  readEFUSE","slug":"函数-readefuse","link":"#函数-readefuse","children":[]},{"level":3,"title":"函数  usage","slug":"函数-usage","link":"#函数-usage","children":[]},{"level":3,"title":"函数  top","slug":"函数-top","link":"#函数-top","children":[]},{"level":3,"title":"函数  setTime","slug":"函数-settime","link":"#函数-settime","children":[]},{"level":3,"title":"函数  setTimezoneOffset","slug":"函数-settimezoneoffset","link":"#函数-settimezoneoffset","children":[]}]}],"git":{"createdTime":1714757277000,"updatedTime":1714918354000,"contributors":[{"name":"alee","email":"alee@chou.im","commits":2}]},"readingTime":{"minutes":2.09,"words":627},"filePathRelative":"api/process.md","localizedDate":"2024年5月4日","autoDesc":true}');export{c as comp,d as data};
