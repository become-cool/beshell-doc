import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,d as s,a as t,w as p,e as l}from"./app-u7kf_eFM.js";const u={},r=n("h1",{id:"使用-javascript-控制-gpio",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-javascript-控制-gpio"},[n("span",null,"使用 JavaScript 控制 GPIO")])],-1),k=n("h2",{id:"_1-arduino-启动工程代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-arduino-启动工程代码"},[n("span",null,"1. Arduino 启动工程代码")])],-1),d=l(`<p>使用 GPIO 模块的 Arduion 工程代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BeShell.hpp&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> be<span class="token punctuation">;</span>

BeShell be<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 启动 GPIO 模块</span>
    beshell<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">use</span><span class="token generic class-name"><span class="token operator">&lt;</span>GPIO<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>

    <span class="token comment">// 启动 文件系统模块</span>
    beshell<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">use</span><span class="token generic class-name"><span class="token operator">&lt;</span>FS<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token comment">// 挂载分区</span>
    <span class="token class-name">FS</span><span class="token double-colon punctuation">::</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token function">FatFS</span><span class="token punctuation">(</span><span class="token string">&quot;ffat&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token comment">// 启动 BeShell</span>
    beshell<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主循环</span>
<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    beshell<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ESP-IDF 框架下使用 WiFi 模块的工程类似</p></blockquote><p>接下来是 JavaScript 文件的例子。</p><h2 id="_2-简单的闪烁-led-的例子" tabindex="-1"><a class="header-anchor" href="#_2-简单的闪烁-led-的例子"><span>2. 简单的闪烁 LED 的例子</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> gpio <span class="token keyword">from</span> <span class="token string">&quot;gpio&quot;</span>

<span class="token comment">// set 12, 13, 14, 15 as output mode</span>
gpio<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span>
gpio<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span>
gpio<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span>
gpio<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// blink the LEDs every second</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    gpio<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> gpio<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
    gpio<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> gpio<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
    gpio<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> gpio<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
    gpio<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> gpio<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将4个 LED 连接到 12, 13, 14, 15 四路 GPIO 上，然后运行上面的代码，就可以看到 LED 开始闪烁。</p><blockquote><p>注意: 通常 LED 的耐受电压低于 GPIO 输出的 3.3V，所以需要串联一个 1KΩ 的电阻来降低输出电压。压。</p></blockquote><h2 id="_3-读取按键开关的例子" tabindex="-1"><a class="header-anchor" href="#_3-读取按键开关的例子"><span>3. 读取按键开关的例子</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> gpio <span class="token keyword">from</span> <span class="token string">&quot;gpio&quot;</span>

<span class="token comment">// 引脚 16 设置为输入模式</span>
gpio<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 引脚 16 设置为内部上拉</span>
gpio<span class="token punctuation">.</span><span class="token function">pull</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 监听并输出 16 引脚的状态变化</span>
gpio<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;both&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">pin<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Button released&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Button pressed&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备一个按键开关，连接 16 引脚，另一脚连接电源 GNDA。运行上面的代码，当按键按下时，控制台会输出 &quot;Button pressed&quot;，当按键松开时，控制台会输出 &quot;Button released&quot;。</p>`,11);function v(m,b){const a=o("RouteLink");return c(),i("div",null,[r,n("p",null,[s("GPIO 功能是单片机的基础，BeShell 较完整的实现了 GPIO 功能的 JavaScript API 。下面给出了一些常用的例子，详细 API 请参考 "),t(a,{to:"/api/gpio.html"},{default:p(()=>[s("GPIO 模块 API")]),_:1}),s("。")]),k,n("p",null,[s("这里主要介绍 GPIO 模块的 JavaScript API，如何在 ESP32 设备上运行 JavaScript 文件，请参考："),t(a,{to:"/guide/run-js-script.html"},{default:p(()=>[s("运行 JavaScript 脚本文件")]),_:1})]),d])}const f=e(u,[["render",v],["__file","gpio.html.vue"]]),P=JSON.parse('{"path":"/guide/gpio.html","title":"使用 JavaScript 控制 GPIO","lang":"zh-CN","frontmatter":{"description":"使用 JavaScript 控制 GPIO GPIO 功能是单片机的基础，BeShell 较完整的实现了 GPIO 功能的 JavaScript API 。下面给出了一些常用的例子，详细 API 请参考 。 1. Arduino 启动工程代码 这里主要介绍 GPIO 模块的 JavaScript API，如何在 ESP32 设备上运行 JavaScri...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/gpio.html"}],["meta",{"property":"og:title","content":"使用 JavaScript 控制 GPIO"}],["meta",{"property":"og:description","content":"使用 JavaScript 控制 GPIO GPIO 功能是单片机的基础，BeShell 较完整的实现了 GPIO 功能的 JavaScript API 。下面给出了一些常用的例子，详细 API 请参考 。 1. Arduino 启动工程代码 这里主要介绍 GPIO 模块的 JavaScript API，如何在 ESP32 设备上运行 JavaScri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 JavaScript 控制 GPIO\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. Arduino 启动工程代码","slug":"_1-arduino-启动工程代码","link":"#_1-arduino-启动工程代码","children":[]},{"level":2,"title":"2. 简单的闪烁 LED 的例子","slug":"_2-简单的闪烁-led-的例子","link":"#_2-简单的闪烁-led-的例子","children":[]},{"level":2,"title":"3. 读取按键开关的例子","slug":"_3-读取按键开关的例子","link":"#_3-读取按键开关的例子","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.52,"words":457},"filePathRelative":"guide/gpio.md","autoDesc":true}');export{f as comp,P as data};
