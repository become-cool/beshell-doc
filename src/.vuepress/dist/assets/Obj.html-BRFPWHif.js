import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as t,b as l,d as n,e as s,w as o,r as i,o as h}from"./app-CbJW3NnK.js";const g={},u={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},c={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},le={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},se={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},te={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},re={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},de={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},he={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},be={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},me={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Le={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},je={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ce={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},qe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},we={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},ze={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ee={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Oe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},De={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Re={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},He={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},We={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"},Me={href:"https://docs.lvgl.io/9.0/API/index.html",target:"_blank",rel:"noopener noreferrer"};function Ze(Je,e){const r=i("ExternalLinkIcon"),p=i("RouteLink");return h(),d("div",null,[e[376]||(e[376]=t('<h1 id="类-obj" tabindex="-1"><a class="header-anchor" href="#类-obj"><span>类: Obj</span></a></h1><h2 id="类属性" tabindex="-1"><a class="header-anchor" href="#类属性"><span>类属性</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="属性-state" tabindex="-1"><a class="header-anchor" href="#属性-state"><span><span class="member-header property"></span> 属性 state</span></a></h3><p>类型: number</p><p>访问: 只读</p>',6)),l("blockquote",null,[l("p",null,[e[1]||(e[1]=n("该属性是对 LVGL C API ")),e[2]||(e[2]=l("code",null,"lv_obj_get_state",-1)),e[3]||(e[3]=n(" 的封装， 具体用法请参考 ")),l("a",u,[e[0]||(e[0]=n("LVGL文档")),s(r)])])]),e[377]||(e[377]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-eventcount" tabindex="-1"><a class="header-anchor" href="#属性-eventcount"><span><span class="member-header property"></span> 属性 eventCount</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[5]||(e[5]=n("该属性是对 LVGL C API ")),e[6]||(e[6]=l("code",null,"lv_obj_get_event_count",-1)),e[7]||(e[7]=n(" 的封装， 具体用法请参考 ")),l("a",x,[e[4]||(e[4]=n("LVGL文档")),s(r)])])]),e[378]||(e[378]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-x" tabindex="-1"><a class="header-anchor" href="#属性-x"><span><span class="member-header property"></span> 属性 x</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[9]||(e[9]=n("该属性是对 LVGL C API ")),e[10]||(e[10]=l("code",null,"lv_obj_get_x",-1)),e[11]||(e[11]=n(", ")),e[12]||(e[12]=l("code",null,"lv_obj_set_x",-1)),e[13]||(e[13]=n(" 的封装， 具体用法请参考 ")),l("a",b,[e[8]||(e[8]=n("LVGL文档")),s(r)])])]),e[379]||(e[379]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-y" tabindex="-1"><a class="header-anchor" href="#属性-y"><span><span class="member-header property"></span> 属性 y</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[15]||(e[15]=n("该属性是对 LVGL C API ")),e[16]||(e[16]=l("code",null,"lv_obj_get_y",-1)),e[17]||(e[17]=n(", ")),e[18]||(e[18]=l("code",null,"lv_obj_set_y",-1)),e[19]||(e[19]=n(" 的封装， 具体用法请参考 ")),l("a",m,[e[14]||(e[14]=n("LVGL文档")),s(r)])])]),e[380]||(e[380]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-width" tabindex="-1"><a class="header-anchor" href="#属性-width"><span><span class="member-header property"></span> 属性 width</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[21]||(e[21]=n("该属性是对 LVGL C API ")),e[22]||(e[22]=l("code",null,"lv_obj_get_width",-1)),e[23]||(e[23]=n(", ")),e[24]||(e[24]=l("code",null,"lv_obj_set_width",-1)),e[25]||(e[25]=n(" 的封装， 具体用法请参考 ")),l("a",f,[e[20]||(e[20]=n("LVGL文档")),s(r)])])]),e[381]||(e[381]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-height" tabindex="-1"><a class="header-anchor" href="#属性-height"><span><span class="member-header property"></span> 属性 height</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[27]||(e[27]=n("该属性是对 LVGL C API ")),e[28]||(e[28]=l("code",null,"lv_obj_get_height",-1)),e[29]||(e[29]=n(", ")),e[30]||(e[30]=l("code",null,"lv_obj_set_height",-1)),e[31]||(e[31]=n(" 的封装， 具体用法请参考 ")),l("a",v,[e[26]||(e[26]=n("LVGL文档")),s(r)])])]),e[382]||(e[382]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-contentwidth" tabindex="-1"><a class="header-anchor" href="#属性-contentwidth"><span><span class="member-header property"></span> 属性 contentWidth</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[33]||(e[33]=n("该属性是对 LVGL C API ")),e[34]||(e[34]=l("code",null,"lv_obj_get_content_width",-1)),e[35]||(e[35]=n(", ")),e[36]||(e[36]=l("code",null,"lv_obj_set_content_width",-1)),e[37]||(e[37]=n(" 的封装， 具体用法请参考 ")),l("a",y,[e[32]||(e[32]=n("LVGL文档")),s(r)])])]),e[383]||(e[383]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-contentheight" tabindex="-1"><a class="header-anchor" href="#属性-contentheight"><span><span class="member-header property"></span> 属性 contentHeight</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[39]||(e[39]=n("该属性是对 LVGL C API ")),e[40]||(e[40]=l("code",null,"lv_obj_get_content_height",-1)),e[41]||(e[41]=n(", ")),e[42]||(e[42]=l("code",null,"lv_obj_set_content_height",-1)),e[43]||(e[43]=n(" 的封装， 具体用法请参考 ")),l("a",L,[e[38]||(e[38]=n("LVGL文档")),s(r)])])]),e[384]||(e[384]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-layout" tabindex="-1"><a class="header-anchor" href="#属性-layout"><span><span class="member-header property"></span> 属性 layout</span></a></h3><p>类型: number</p><p>访问: 只写</p>',5)),l("blockquote",null,[l("p",null,[e[45]||(e[45]=n("该属性是对 LVGL C API ")),e[46]||(e[46]=l("code",null,"lv_obj_set_layout",-1)),e[47]||(e[47]=n(" 的封装， 具体用法请参考 ")),l("a",k,[e[44]||(e[44]=n("LVGL文档")),s(r)])])]),e[385]||(e[385]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-align" tabindex="-1"><a class="header-anchor" href="#属性-align"><span><span class="member-header property"></span> 属性 align</span></a></h3><p>类型: LV-CONST</p><p>访问: 只写</p>',5)),l("blockquote",null,[l("p",null,[e[49]||(e[49]=n("该属性是对 LVGL C API ")),e[50]||(e[50]=l("code",null,"lv_obj_set_align",-1)),e[51]||(e[51]=n(" 的封装， 具体用法请参考 ")),l("a",A,[e[48]||(e[48]=n("LVGL文档")),s(r)])])]),e[386]||(e[386]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-xaligned" tabindex="-1"><a class="header-anchor" href="#属性-xaligned"><span><span class="member-header property"></span> 属性 xAligned</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[53]||(e[53]=n("该属性是对 LVGL C API ")),e[54]||(e[54]=l("code",null,"lv_obj_get_x_aligned",-1)),e[55]||(e[55]=n(" 的封装， 具体用法请参考 ")),l("a",V,[e[52]||(e[52]=n("LVGL文档")),s(r)])])]),e[387]||(e[387]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-yaligned" tabindex="-1"><a class="header-anchor" href="#属性-yaligned"><span><span class="member-header property"></span> 属性 yAligned</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[57]||(e[57]=n("该属性是对 LVGL C API ")),e[58]||(e[58]=l("code",null,"lv_obj_get_y_aligned",-1)),e[59]||(e[59]=n(" 的封装， 具体用法请参考 ")),l("a",I,[e[56]||(e[56]=n("LVGL文档")),s(r)])])]),e[388]||(e[388]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-selfwidth" tabindex="-1"><a class="header-anchor" href="#属性-selfwidth"><span><span class="member-header property"></span> 属性 selfWidth</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[61]||(e[61]=n("该属性是对 LVGL C API ")),e[62]||(e[62]=l("code",null,"lv_obj_get_self_width",-1)),e[63]||(e[63]=n(" 的封装， 具体用法请参考 ")),l("a",G,[e[60]||(e[60]=n("LVGL文档")),s(r)])])]),e[389]||(e[389]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-selfheight" tabindex="-1"><a class="header-anchor" href="#属性-selfheight"><span><span class="member-header property"></span> 属性 selfHeight</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[65]||(e[65]=n("该属性是对 LVGL C API ")),e[66]||(e[66]=l("code",null,"lv_obj_get_self_height",-1)),e[67]||(e[67]=n(" 的封装， 具体用法请参考 ")),l("a",P,[e[64]||(e[64]=n("LVGL文档")),s(r)])])]),e[390]||(e[390]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-extclickarea" tabindex="-1"><a class="header-anchor" href="#属性-extclickarea"><span><span class="member-header property"></span> 属性 extClickArea</span></a></h3><p>类型: number</p><p>访问: 只写</p>',5)),l("blockquote",null,[l("p",null,[e[69]||(e[69]=n("该属性是对 LVGL C API ")),e[70]||(e[70]=l("code",null,"lv_obj_set_ext_click_area",-1)),e[71]||(e[71]=n(" 的封装， 具体用法请参考 ")),l("a",j,[e[68]||(e[68]=n("LVGL文档")),s(r)])])]),e[391]||(e[391]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollbarmode" tabindex="-1"><a class="header-anchor" href="#属性-scrollbarmode"><span><span class="member-header property"></span> 属性 scrollbarMode</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[73]||(e[73]=n("该属性是对 LVGL C API ")),e[74]||(e[74]=l("code",null,"lv_obj_get_scrollbar_mode",-1)),e[75]||(e[75]=n(", ")),e[76]||(e[76]=l("code",null,"lv_obj_set_scrollbar_mode",-1)),e[77]||(e[77]=n(" 的封装， 具体用法请参考 ")),l("a",C,[e[72]||(e[72]=n("LVGL文档")),s(r)])])]),e[392]||(e[392]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrolldir" tabindex="-1"><a class="header-anchor" href="#属性-scrolldir"><span><span class="member-header property"></span> 属性 scrollDir</span></a></h3><p>类型: LV-CONST</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[79]||(e[79]=n("该属性是对 LVGL C API ")),e[80]||(e[80]=l("code",null,"lv_obj_get_scroll_dir",-1)),e[81]||(e[81]=n(", ")),e[82]||(e[82]=l("code",null,"lv_obj_set_scroll_dir",-1)),e[83]||(e[83]=n(" 的封装， 具体用法请参考 ")),l("a",q,[e[78]||(e[78]=n("LVGL文档")),s(r)])])]),e[393]||(e[393]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollsnapx" tabindex="-1"><a class="header-anchor" href="#属性-scrollsnapx"><span><span class="member-header property"></span> 属性 scrollSnapX</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[85]||(e[85]=n("该属性是对 LVGL C API ")),e[86]||(e[86]=l("code",null,"lv_obj_get_scroll_snap_x",-1)),e[87]||(e[87]=n(", ")),e[88]||(e[88]=l("code",null,"lv_obj_set_scroll_snap_x",-1)),e[89]||(e[89]=n(" 的封装， 具体用法请参考 ")),l("a",w,[e[84]||(e[84]=n("LVGL文档")),s(r)])])]),e[394]||(e[394]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollsnapy" tabindex="-1"><a class="header-anchor" href="#属性-scrollsnapy"><span><span class="member-header property"></span> 属性 scrollSnapY</span></a></h3><p>类型: number</p><p>访问: 可读, 可写</p>',5)),l("blockquote",null,[l("p",null,[e[91]||(e[91]=n("该属性是对 LVGL C API ")),e[92]||(e[92]=l("code",null,"lv_obj_get_scroll_snap_y",-1)),e[93]||(e[93]=n(", ")),e[94]||(e[94]=l("code",null,"lv_obj_set_scroll_snap_y",-1)),e[95]||(e[95]=n(" 的封装， 具体用法请参考 ")),l("a",S,[e[90]||(e[90]=n("LVGL文档")),s(r)])])]),e[395]||(e[395]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollx" tabindex="-1"><a class="header-anchor" href="#属性-scrollx"><span><span class="member-header property"></span> 属性 scrollX</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[97]||(e[97]=n("该属性是对 LVGL C API ")),e[98]||(e[98]=l("code",null,"lv_obj_get_scroll_x",-1)),e[99]||(e[99]=n(" 的封装， 具体用法请参考 ")),l("a",z,[e[96]||(e[96]=n("LVGL文档")),s(r)])])]),e[396]||(e[396]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrolly" tabindex="-1"><a class="header-anchor" href="#属性-scrolly"><span><span class="member-header property"></span> 属性 scrollY</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[101]||(e[101]=n("该属性是对 LVGL C API ")),e[102]||(e[102]=l("code",null,"lv_obj_get_scroll_y",-1)),e[103]||(e[103]=n(" 的封装， 具体用法请参考 ")),l("a",T,[e[100]||(e[100]=n("LVGL文档")),s(r)])])]),e[397]||(e[397]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrolltop" tabindex="-1"><a class="header-anchor" href="#属性-scrolltop"><span><span class="member-header property"></span> 属性 scrollTop</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[105]||(e[105]=n("该属性是对 LVGL C API ")),e[106]||(e[106]=l("code",null,"lv_obj_get_scroll_top",-1)),e[107]||(e[107]=n(" 的封装， 具体用法请参考 ")),l("a",E,[e[104]||(e[104]=n("LVGL文档")),s(r)])])]),e[398]||(e[398]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollbottom" tabindex="-1"><a class="header-anchor" href="#属性-scrollbottom"><span><span class="member-header property"></span> 属性 scrollBottom</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[109]||(e[109]=n("该属性是对 LVGL C API ")),e[110]||(e[110]=l("code",null,"lv_obj_get_scroll_bottom",-1)),e[111]||(e[111]=n(" 的封装， 具体用法请参考 ")),l("a",B,[e[108]||(e[108]=n("LVGL文档")),s(r)])])]),e[399]||(e[399]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollleft" tabindex="-1"><a class="header-anchor" href="#属性-scrollleft"><span><span class="member-header property"></span> 属性 scrollLeft</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[113]||(e[113]=n("该属性是对 LVGL C API ")),e[114]||(e[114]=l("code",null,"lv_obj_get_scroll_left",-1)),e[115]||(e[115]=n(" 的封装， 具体用法请参考 ")),l("a",F,[e[112]||(e[112]=n("LVGL文档")),s(r)])])]),e[400]||(e[400]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-scrollright" tabindex="-1"><a class="header-anchor" href="#属性-scrollright"><span><span class="member-header property"></span> 属性 scrollRight</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[117]||(e[117]=n("该属性是对 LVGL C API ")),e[118]||(e[118]=l("code",null,"lv_obj_get_scroll_right",-1)),e[119]||(e[119]=n(" 的封装， 具体用法请参考 ")),l("a",O,[e[116]||(e[116]=n("LVGL文档")),s(r)])])]),e[401]||(e[401]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-parent" tabindex="-1"><a class="header-anchor" href="#属性-parent"><span><span class="member-header property"></span> 属性 parent</span></a></h3>',3)),l("p",null,[e[121]||(e[121]=n("类型: ")),s(p,{to:"/api/lvgl/widgets/obj.html"},{default:o(()=>e[120]||(e[120]=[n("obj")])),_:1})]),e[402]||(e[402]=l("p",null,"访问: 可读, 可写",-1)),l("blockquote",null,[l("p",null,[e[123]||(e[123]=n("该属性是对 LVGL C API ")),e[124]||(e[124]=l("code",null,"lv_obj_get_parent",-1)),e[125]||(e[125]=n(", ")),e[126]||(e[126]=l("code",null,"lv_obj_set_parent",-1)),e[127]||(e[127]=n(" 的封装， 具体用法请参考 ")),l("a",D,[e[122]||(e[122]=n("LVGL文档")),s(r)])])]),e[403]||(e[403]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-screen" tabindex="-1"><a class="header-anchor" href="#属性-screen"><span><span class="member-header property"></span> 属性 screen</span></a></h3>',3)),l("p",null,[e[129]||(e[129]=n("类型: ")),s(p,{to:"/api/lvgl/widgets/obj.html"},{default:o(()=>e[128]||(e[128]=[n("obj")])),_:1})]),e[404]||(e[404]=l("p",null,"访问: 只读",-1)),l("blockquote",null,[l("p",null,[e[131]||(e[131]=n("该属性是对 LVGL C API ")),e[132]||(e[132]=l("code",null,"lv_obj_get_screen",-1)),e[133]||(e[133]=n(" 的封装， 具体用法请参考 ")),l("a",N,[e[130]||(e[130]=n("LVGL文档")),s(r)])])]),e[405]||(e[405]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-childcount" tabindex="-1"><a class="header-anchor" href="#属性-childcount"><span><span class="member-header property"></span> 属性 childCount</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[135]||(e[135]=n("该属性是对 LVGL C API ")),e[136]||(e[136]=l("code",null,"lv_obj_get_child_count",-1)),e[137]||(e[137]=n(" 的封装， 具体用法请参考 ")),l("a",R,[e[134]||(e[134]=n("LVGL文档")),s(r)])])]),e[406]||(e[406]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-index" tabindex="-1"><a class="header-anchor" href="#属性-index"><span><span class="member-header property"></span> 属性 index</span></a></h3><p>类型: number</p><p>访问: 只读</p>',5)),l("blockquote",null,[l("p",null,[e[139]||(e[139]=n("该属性是对 LVGL C API ")),e[140]||(e[140]=l("code",null,"lv_obj_get_index",-1)),e[141]||(e[141]=n(" 的封装， 具体用法请参考 ")),l("a",X,[e[138]||(e[138]=n("LVGL文档")),s(r)])])]),e[407]||(e[407]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-flexflow" tabindex="-1"><a class="header-anchor" href="#属性-flexflow"><span><span class="member-header property"></span> 属性 flexFlow</span></a></h3><p>类型: LV-CONST</p><p>访问: 只写</p>',5)),l("blockquote",null,[l("p",null,[e[143]||(e[143]=n("该属性是对 LVGL C API ")),e[144]||(e[144]=l("code",null,"lv_obj_set_flex_flow",-1)),e[145]||(e[145]=n(" 的封装， 具体用法请参考 ")),l("a",Y,[e[142]||(e[142]=n("LVGL文档")),s(r)])])]),e[408]||(e[408]=t('<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="属性-flexgrow" tabindex="-1"><a class="header-anchor" href="#属性-flexgrow"><span><span class="member-header property"></span> 属性 flexGrow</span></a></h3><p>类型: number</p><p>访问: 只写</p>',5)),l("blockquote",null,[l("p",null,[e[147]||(e[147]=n("该属性是对 LVGL C API ")),e[148]||(e[148]=l("code",null,"lv_obj_set_flex_grow",-1)),e[149]||(e[149]=n(" 的封装， 具体用法请参考 ")),l("a",H,[e[146]||(e[146]=n("LVGL文档")),s(r)])])]),e[409]||(e[409]=t('<p style="height:10px;margin:0px;"></p><h2 id="类方法" tabindex="-1"><a class="header-anchor" href="#类方法"><span>类方法</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="方法-addflag" tabindex="-1"><a class="header-anchor" href="#方法-addflag"><span><span class="member-header function"></span> 方法 addFlag</span></a></h3><p>原型: addFlag ()</p>',5)),l("blockquote",null,[l("p",null,[e[151]||(e[151]=n("该方法是对 LVGL C API ")),e[152]||(e[152]=l("code",null,"lv_obj_add_flag",-1)),e[153]||(e[153]=n(" 的封装，具体用法请参考 ")),l("a",W,[e[150]||(e[150]=n("LVGL文档")),s(r)])])]),e[410]||(e[410]=t('<h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-removeflag" tabindex="-1"><a class="header-anchor" href="#方法-removeflag"><span><span class="member-header function"></span> 方法 removeFlag</span></a></h3><p>原型: removeFlag ()</p>',6)),l("blockquote",null,[l("p",null,[e[155]||(e[155]=n("该方法是对 LVGL C API ")),e[156]||(e[156]=l("code",null,"lv_obj_remove_flag",-1)),e[157]||(e[157]=n(" 的封装，具体用法请参考 ")),l("a",M,[e[154]||(e[154]=n("LVGL文档")),s(r)])])]),e[411]||(e[411]=t('<h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-updateflag" tabindex="-1"><a class="header-anchor" href="#方法-updateflag"><span><span class="member-header function"></span> 方法 updateFlag</span></a></h3><p>原型: updateFlag ()</p>',6)),l("blockquote",null,[l("p",null,[e[159]||(e[159]=n("该方法是对 LVGL C API ")),e[160]||(e[160]=l("code",null,"lv_obj_update_flag",-1)),e[161]||(e[161]=n(" 的封装，具体用法请参考 ")),l("a",Z,[e[158]||(e[158]=n("LVGL文档")),s(r)])])]),e[412]||(e[412]=t('<h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-addstate" tabindex="-1"><a class="header-anchor" href="#方法-addstate"><span><span class="member-header function"></span> 方法 addState</span></a></h3><p>原型: addState ()</p>',6)),l("blockquote",null,[l("p",null,[e[163]||(e[163]=n("该方法是对 LVGL C API ")),e[164]||(e[164]=l("code",null,"lv_obj_add_state",-1)),e[165]||(e[165]=n(" 的封装，具体用法请参考 ")),l("a",J,[e[162]||(e[162]=n("LVGL文档")),s(r)])])]),e[413]||(e[413]=t('<h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-removestate" tabindex="-1"><a class="header-anchor" href="#方法-removestate"><span><span class="member-header function"></span> 方法 removeState</span></a></h3><p>原型: removeState ()</p>',6)),l("blockquote",null,[l("p",null,[e[167]||(e[167]=n("该方法是对 LVGL C API ")),e[168]||(e[168]=l("code",null,"lv_obj_remove_state",-1)),e[169]||(e[169]=n(" 的封装，具体用法请参考 ")),l("a",K,[e[166]||(e[166]=n("LVGL文档")),s(r)])])]),e[414]||(e[414]=t('<h4 id="返回值-4" tabindex="-1"><a class="header-anchor" href="#返回值-4"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setstate" tabindex="-1"><a class="header-anchor" href="#方法-setstate"><span><span class="member-header function"></span> 方法 setState</span></a></h3><p>原型: setState ()</p>',6)),l("blockquote",null,[l("p",null,[e[171]||(e[171]=n("该方法是对 LVGL C API ")),e[172]||(e[172]=l("code",null,"lv_obj_set_state",-1)),e[173]||(e[173]=n(" 的封装，具体用法请参考 ")),l("a",Q,[e[170]||(e[170]=n("LVGL文档")),s(r)])])]),e[415]||(e[415]=t('<h4 id="返回值-5" tabindex="-1"><a class="header-anchor" href="#返回值-5"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-hasflag" tabindex="-1"><a class="header-anchor" href="#方法-hasflag"><span><span class="member-header function"></span> 方法 hasFlag</span></a></h3><p>原型: hasFlag ()</p>',6)),l("blockquote",null,[l("p",null,[e[175]||(e[175]=n("该方法是对 LVGL C API ")),e[176]||(e[176]=l("code",null,"lv_obj_has_flag",-1)),e[177]||(e[177]=n(" 的封装，具体用法请参考 ")),l("a",U,[e[174]||(e[174]=n("LVGL文档")),s(r)])])]),e[416]||(e[416]=t('<h4 id="返回值-6" tabindex="-1"><a class="header-anchor" href="#返回值-6"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-hasflagany" tabindex="-1"><a class="header-anchor" href="#方法-hasflagany"><span><span class="member-header function"></span> 方法 hasFlagAny</span></a></h3><p>原型: hasFlagAny ()</p>',6)),l("blockquote",null,[l("p",null,[e[179]||(e[179]=n("该方法是对 LVGL C API ")),e[180]||(e[180]=l("code",null,"lv_obj_has_flag_any",-1)),e[181]||(e[181]=n(" 的封装，具体用法请参考 ")),l("a",$,[e[178]||(e[178]=n("LVGL文档")),s(r)])])]),e[417]||(e[417]=t('<h4 id="返回值-7" tabindex="-1"><a class="header-anchor" href="#返回值-7"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-hasstate" tabindex="-1"><a class="header-anchor" href="#方法-hasstate"><span><span class="member-header function"></span> 方法 hasState</span></a></h3><p>原型: hasState ()</p>',6)),l("blockquote",null,[l("p",null,[e[183]||(e[183]=n("该方法是对 LVGL C API ")),e[184]||(e[184]=l("code",null,"lv_obj_has_state",-1)),e[185]||(e[185]=n(" 的封装，具体用法请参考 ")),l("a",_,[e[182]||(e[182]=n("LVGL文档")),s(r)])])]),e[418]||(e[418]=t('<h4 id="返回值-8" tabindex="-1"><a class="header-anchor" href="#返回值-8"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-allocatespecattr" tabindex="-1"><a class="header-anchor" href="#方法-allocatespecattr"><span><span class="member-header function"></span> 方法 allocateSpecAttr</span></a></h3><p>原型: allocateSpecAttr ()</p>',6)),l("blockquote",null,[l("p",null,[e[187]||(e[187]=n("该方法是对 LVGL C API ")),e[188]||(e[188]=l("code",null,"lv_obj_allocate_spec_attr",-1)),e[189]||(e[189]=n(" 的封装，具体用法请参考 ")),l("a",c,[e[186]||(e[186]=n("LVGL文档")),s(r)])])]),e[419]||(e[419]=t('<h4 id="返回值-9" tabindex="-1"><a class="header-anchor" href="#返回值-9"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-isvalid" tabindex="-1"><a class="header-anchor" href="#方法-isvalid"><span><span class="member-header function"></span> 方法 isValid</span></a></h3><p>原型: isValid ()</p>',6)),l("blockquote",null,[l("p",null,[e[191]||(e[191]=n("该方法是对 LVGL C API ")),e[192]||(e[192]=l("code",null,"lv_obj_is_valid",-1)),e[193]||(e[193]=n(" 的封装，具体用法请参考 ")),l("a",ee,[e[190]||(e[190]=n("LVGL文档")),s(r)])])]),e[420]||(e[420]=t('<h4 id="返回值-10" tabindex="-1"><a class="header-anchor" href="#返回值-10"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-classinitobj" tabindex="-1"><a class="header-anchor" href="#方法-classinitobj"><span><span class="member-header function"></span> 方法 classInitObj</span></a></h3><p>原型: classInitObj ()</p>',6)),l("blockquote",null,[l("p",null,[e[195]||(e[195]=n("该方法是对 LVGL C API ")),e[196]||(e[196]=l("code",null,"lv_obj_class_init_obj",-1)),e[197]||(e[197]=n(" 的封装，具体用法请参考 ")),l("a",le,[e[194]||(e[194]=n("LVGL文档")),s(r)])])]),e[421]||(e[421]=t('<h4 id="返回值-11" tabindex="-1"><a class="header-anchor" href="#返回值-11"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-iseditable" tabindex="-1"><a class="header-anchor" href="#方法-iseditable"><span><span class="member-header function"></span> 方法 isEditable</span></a></h3><p>原型: isEditable ()</p>',6)),l("blockquote",null,[l("p",null,[e[199]||(e[199]=n("该方法是对 LVGL C API ")),e[200]||(e[200]=l("code",null,"lv_obj_is_editable",-1)),e[201]||(e[201]=n(" 的封装，具体用法请参考 ")),l("a",ne,[e[198]||(e[198]=n("LVGL文档")),s(r)])])]),e[422]||(e[422]=t('<h4 id="返回值-12" tabindex="-1"><a class="header-anchor" href="#返回值-12"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-isgroupdef" tabindex="-1"><a class="header-anchor" href="#方法-isgroupdef"><span><span class="member-header function"></span> 方法 isGroupDef</span></a></h3><p>原型: isGroupDef ()</p>',6)),l("blockquote",null,[l("p",null,[e[203]||(e[203]=n("该方法是对 LVGL C API ")),e[204]||(e[204]=l("code",null,"lv_obj_is_group_def",-1)),e[205]||(e[205]=n(" 的封装，具体用法请参考 ")),l("a",se,[e[202]||(e[202]=n("LVGL文档")),s(r)])])]),e[423]||(e[423]=t('<h4 id="返回值-13" tabindex="-1"><a class="header-anchor" href="#返回值-13"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-calculateextdrawsize" tabindex="-1"><a class="header-anchor" href="#方法-calculateextdrawsize"><span><span class="member-header function"></span> 方法 calculateExtDrawSize</span></a></h3><p>原型: calculateExtDrawSize ()</p>',6)),l("blockquote",null,[l("p",null,[e[207]||(e[207]=n("该方法是对 LVGL C API ")),e[208]||(e[208]=l("code",null,"lv_obj_calculate_ext_draw_size",-1)),e[209]||(e[209]=n(" 的封装，具体用法请参考 ")),l("a",te,[e[206]||(e[206]=n("LVGL文档")),s(r)])])]),e[424]||(e[424]=t('<h4 id="返回值-14" tabindex="-1"><a class="header-anchor" href="#返回值-14"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-refreshextdrawsize" tabindex="-1"><a class="header-anchor" href="#方法-refreshextdrawsize"><span><span class="member-header function"></span> 方法 refreshExtDrawSize</span></a></h3><p>原型: refreshExtDrawSize ()</p>',6)),l("blockquote",null,[l("p",null,[e[211]||(e[211]=n("该方法是对 LVGL C API ")),e[212]||(e[212]=l("code",null,"lv_obj_refresh_ext_draw_size",-1)),e[213]||(e[213]=n(" 的封装，具体用法请参考 ")),l("a",re,[e[210]||(e[210]=n("LVGL文档")),s(r)])])]),e[425]||(e[425]=t('<h4 id="返回值-15" tabindex="-1"><a class="header-anchor" href="#返回值-15"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-removeevent" tabindex="-1"><a class="header-anchor" href="#方法-removeevent"><span><span class="member-header function"></span> 方法 removeEvent</span></a></h3><p>原型: removeEvent ()</p>',6)),l("blockquote",null,[l("p",null,[e[215]||(e[215]=n("该方法是对 LVGL C API ")),e[216]||(e[216]=l("code",null,"lv_obj_remove_event",-1)),e[217]||(e[217]=n(" 的封装，具体用法请参考 ")),l("a",pe,[e[214]||(e[214]=n("LVGL文档")),s(r)])])]),e[426]||(e[426]=t('<h4 id="返回值-16" tabindex="-1"><a class="header-anchor" href="#返回值-16"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setpos" tabindex="-1"><a class="header-anchor" href="#方法-setpos"><span><span class="member-header function"></span> 方法 setPos</span></a></h3><p>原型: setPos ()</p>',6)),l("blockquote",null,[l("p",null,[e[219]||(e[219]=n("该方法是对 LVGL C API ")),e[220]||(e[220]=l("code",null,"lv_obj_set_pos",-1)),e[221]||(e[221]=n(" 的封装，具体用法请参考 ")),l("a",oe,[e[218]||(e[218]=n("LVGL文档")),s(r)])])]),e[427]||(e[427]=t('<h4 id="返回值-17" tabindex="-1"><a class="header-anchor" href="#返回值-17"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setsize" tabindex="-1"><a class="header-anchor" href="#方法-setsize"><span><span class="member-header function"></span> 方法 setSize</span></a></h3><p>原型: setSize ()</p>',6)),l("blockquote",null,[l("p",null,[e[223]||(e[223]=n("该方法是对 LVGL C API ")),e[224]||(e[224]=l("code",null,"lv_obj_set_size",-1)),e[225]||(e[225]=n(" 的封装，具体用法请参考 ")),l("a",ie,[e[222]||(e[222]=n("LVGL文档")),s(r)])])]),e[428]||(e[428]=t('<h4 id="返回值-18" tabindex="-1"><a class="header-anchor" href="#返回值-18"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-refrsize" tabindex="-1"><a class="header-anchor" href="#方法-refrsize"><span><span class="member-header function"></span> 方法 refrSize</span></a></h3><p>原型: refrSize ()</p>',6)),l("blockquote",null,[l("p",null,[e[227]||(e[227]=n("该方法是对 LVGL C API ")),e[228]||(e[228]=l("code",null,"lv_obj_refr_size",-1)),e[229]||(e[229]=n(" 的封装，具体用法请参考 ")),l("a",ae,[e[226]||(e[226]=n("LVGL文档")),s(r)])])]),e[429]||(e[429]=t('<h4 id="返回值-19" tabindex="-1"><a class="header-anchor" href="#返回值-19"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-islayoutpositioned" tabindex="-1"><a class="header-anchor" href="#方法-islayoutpositioned"><span><span class="member-header function"></span> 方法 isLayoutPositioned</span></a></h3><p>原型: isLayoutPositioned ()</p>',6)),l("blockquote",null,[l("p",null,[e[231]||(e[231]=n("该方法是对 LVGL C API ")),e[232]||(e[232]=l("code",null,"lv_obj_is_layout_positioned",-1)),e[233]||(e[233]=n(" 的封装，具体用法请参考 ")),l("a",de,[e[230]||(e[230]=n("LVGL文档")),s(r)])])]),e[430]||(e[430]=t('<h4 id="返回值-20" tabindex="-1"><a class="header-anchor" href="#返回值-20"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-marklayoutasdirty" tabindex="-1"><a class="header-anchor" href="#方法-marklayoutasdirty"><span><span class="member-header function"></span> 方法 markLayoutAsDirty</span></a></h3><p>原型: markLayoutAsDirty ()</p>',6)),l("blockquote",null,[l("p",null,[e[235]||(e[235]=n("该方法是对 LVGL C API ")),e[236]||(e[236]=l("code",null,"lv_obj_mark_layout_as_dirty",-1)),e[237]||(e[237]=n(" 的封装，具体用法请参考 ")),l("a",he,[e[234]||(e[234]=n("LVGL文档")),s(r)])])]),e[431]||(e[431]=t('<h4 id="返回值-21" tabindex="-1"><a class="header-anchor" href="#返回值-21"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-updatelayout" tabindex="-1"><a class="header-anchor" href="#方法-updatelayout"><span><span class="member-header function"></span> 方法 updateLayout</span></a></h3><p>原型: updateLayout ()</p>',6)),l("blockquote",null,[l("p",null,[e[239]||(e[239]=n("该方法是对 LVGL C API ")),e[240]||(e[240]=l("code",null,"lv_obj_update_layout",-1)),e[241]||(e[241]=n(" 的封装，具体用法请参考 ")),l("a",ge,[e[238]||(e[238]=n("LVGL文档")),s(r)])])]),e[432]||(e[432]=t('<h4 id="返回值-22" tabindex="-1"><a class="header-anchor" href="#返回值-22"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-alignto" tabindex="-1"><a class="header-anchor" href="#方法-alignto"><span><span class="member-header function"></span> 方法 alignTo</span></a></h3><p>原型: alignTo ()</p>',6)),l("blockquote",null,[l("p",null,[e[243]||(e[243]=n("该方法是对 LVGL C API ")),e[244]||(e[244]=l("code",null,"lv_obj_align_to",-1)),e[245]||(e[245]=n(" 的封装，具体用法请参考 ")),l("a",ue,[e[242]||(e[242]=n("LVGL文档")),s(r)])])]),e[433]||(e[433]=t('<h4 id="返回值-23" tabindex="-1"><a class="header-anchor" href="#返回值-23"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-refreshselfsize" tabindex="-1"><a class="header-anchor" href="#方法-refreshselfsize"><span><span class="member-header function"></span> 方法 refreshSelfSize</span></a></h3><p>原型: refreshSelfSize ()</p>',6)),l("blockquote",null,[l("p",null,[e[247]||(e[247]=n("该方法是对 LVGL C API ")),e[248]||(e[248]=l("code",null,"lv_obj_refresh_self_size",-1)),e[249]||(e[249]=n(" 的封装，具体用法请参考 ")),l("a",xe,[e[246]||(e[246]=n("LVGL文档")),s(r)])])]),e[434]||(e[434]=t('<h4 id="返回值-24" tabindex="-1"><a class="header-anchor" href="#返回值-24"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-refrpos" tabindex="-1"><a class="header-anchor" href="#方法-refrpos"><span><span class="member-header function"></span> 方法 refrPos</span></a></h3><p>原型: refrPos ()</p>',6)),l("blockquote",null,[l("p",null,[e[251]||(e[251]=n("该方法是对 LVGL C API ")),e[252]||(e[252]=l("code",null,"lv_obj_refr_pos",-1)),e[253]||(e[253]=n(" 的封装，具体用法请参考 ")),l("a",be,[e[250]||(e[250]=n("LVGL文档")),s(r)])])]),e[435]||(e[435]=t('<h4 id="返回值-25" tabindex="-1"><a class="header-anchor" href="#返回值-25"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-moveto" tabindex="-1"><a class="header-anchor" href="#方法-moveto"><span><span class="member-header function"></span> 方法 moveTo</span></a></h3><p>原型: moveTo ()</p>',6)),l("blockquote",null,[l("p",null,[e[255]||(e[255]=n("该方法是对 LVGL C API ")),e[256]||(e[256]=l("code",null,"lv_obj_move_to",-1)),e[257]||(e[257]=n(" 的封装，具体用法请参考 ")),l("a",me,[e[254]||(e[254]=n("LVGL文档")),s(r)])])]),e[436]||(e[436]=t('<h4 id="返回值-26" tabindex="-1"><a class="header-anchor" href="#返回值-26"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-movechildrenby" tabindex="-1"><a class="header-anchor" href="#方法-movechildrenby"><span><span class="member-header function"></span> 方法 moveChildrenBy</span></a></h3><p>原型: moveChildrenBy ()</p>',6)),l("blockquote",null,[l("p",null,[e[259]||(e[259]=n("该方法是对 LVGL C API ")),e[260]||(e[260]=l("code",null,"lv_obj_move_children_by",-1)),e[261]||(e[261]=n(" 的封装，具体用法请参考 ")),l("a",fe,[e[258]||(e[258]=n("LVGL文档")),s(r)])])]),e[437]||(e[437]=t('<h4 id="返回值-27" tabindex="-1"><a class="header-anchor" href="#返回值-27"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-invalidate" tabindex="-1"><a class="header-anchor" href="#方法-invalidate"><span><span class="member-header function"></span> 方法 invalidate</span></a></h3><p>原型: invalidate ()</p>',6)),l("blockquote",null,[l("p",null,[e[263]||(e[263]=n("该方法是对 LVGL C API ")),e[264]||(e[264]=l("code",null,"lv_obj_invalidate",-1)),e[265]||(e[265]=n(" 的封装，具体用法请参考 ")),l("a",ve,[e[262]||(e[262]=n("LVGL文档")),s(r)])])]),e[438]||(e[438]=t('<h4 id="返回值-28" tabindex="-1"><a class="header-anchor" href="#返回值-28"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-isvisible" tabindex="-1"><a class="header-anchor" href="#方法-isvisible"><span><span class="member-header function"></span> 方法 isVisible</span></a></h3><p>原型: isVisible ()</p>',6)),l("blockquote",null,[l("p",null,[e[267]||(e[267]=n("该方法是对 LVGL C API ")),e[268]||(e[268]=l("code",null,"lv_obj_is_visible",-1)),e[269]||(e[269]=n(" 的封装，具体用法请参考 ")),l("a",ye,[e[266]||(e[266]=n("LVGL文档")),s(r)])])]),e[439]||(e[439]=t('<h4 id="返回值-29" tabindex="-1"><a class="header-anchor" href="#返回值-29"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrollby" tabindex="-1"><a class="header-anchor" href="#方法-scrollby"><span><span class="member-header function"></span> 方法 scrollBy</span></a></h3><p>原型: scrollBy ()</p>',6)),l("blockquote",null,[l("p",null,[e[271]||(e[271]=n("该方法是对 LVGL C API ")),e[272]||(e[272]=l("code",null,"lv_obj_scroll_by",-1)),e[273]||(e[273]=n(" 的封装，具体用法请参考 ")),l("a",Le,[e[270]||(e[270]=n("LVGL文档")),s(r)])])]),e[440]||(e[440]=t('<h4 id="返回值-30" tabindex="-1"><a class="header-anchor" href="#返回值-30"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrollbybounded" tabindex="-1"><a class="header-anchor" href="#方法-scrollbybounded"><span><span class="member-header function"></span> 方法 scrollByBounded</span></a></h3><p>原型: scrollByBounded ()</p>',6)),l("blockquote",null,[l("p",null,[e[275]||(e[275]=n("该方法是对 LVGL C API ")),e[276]||(e[276]=l("code",null,"lv_obj_scroll_by_bounded",-1)),e[277]||(e[277]=n(" 的封装，具体用法请参考 ")),l("a",ke,[e[274]||(e[274]=n("LVGL文档")),s(r)])])]),e[441]||(e[441]=t('<h4 id="返回值-31" tabindex="-1"><a class="header-anchor" href="#返回值-31"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrollto" tabindex="-1"><a class="header-anchor" href="#方法-scrollto"><span><span class="member-header function"></span> 方法 scrollTo</span></a></h3><p>原型: scrollTo ()</p>',6)),l("blockquote",null,[l("p",null,[e[279]||(e[279]=n("该方法是对 LVGL C API ")),e[280]||(e[280]=l("code",null,"lv_obj_scroll_to",-1)),e[281]||(e[281]=n(" 的封装，具体用法请参考 ")),l("a",Ae,[e[278]||(e[278]=n("LVGL文档")),s(r)])])]),e[442]||(e[442]=t('<h4 id="返回值-32" tabindex="-1"><a class="header-anchor" href="#返回值-32"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrolltox" tabindex="-1"><a class="header-anchor" href="#方法-scrolltox"><span><span class="member-header function"></span> 方法 scrollToX</span></a></h3><p>原型: scrollToX ()</p>',6)),l("blockquote",null,[l("p",null,[e[283]||(e[283]=n("该方法是对 LVGL C API ")),e[284]||(e[284]=l("code",null,"lv_obj_scroll_to_x",-1)),e[285]||(e[285]=n(" 的封装，具体用法请参考 ")),l("a",Ve,[e[282]||(e[282]=n("LVGL文档")),s(r)])])]),e[443]||(e[443]=t('<h4 id="返回值-33" tabindex="-1"><a class="header-anchor" href="#返回值-33"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrolltoy" tabindex="-1"><a class="header-anchor" href="#方法-scrolltoy"><span><span class="member-header function"></span> 方法 scrollToY</span></a></h3><p>原型: scrollToY ()</p>',6)),l("blockquote",null,[l("p",null,[e[287]||(e[287]=n("该方法是对 LVGL C API ")),e[288]||(e[288]=l("code",null,"lv_obj_scroll_to_y",-1)),e[289]||(e[289]=n(" 的封装，具体用法请参考 ")),l("a",Ie,[e[286]||(e[286]=n("LVGL文档")),s(r)])])]),e[444]||(e[444]=t('<h4 id="返回值-34" tabindex="-1"><a class="header-anchor" href="#返回值-34"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrolltoview" tabindex="-1"><a class="header-anchor" href="#方法-scrolltoview"><span><span class="member-header function"></span> 方法 scrollToView</span></a></h3><p>原型: scrollToView ()</p>',6)),l("blockquote",null,[l("p",null,[e[291]||(e[291]=n("该方法是对 LVGL C API ")),e[292]||(e[292]=l("code",null,"lv_obj_scroll_to_view",-1)),e[293]||(e[293]=n(" 的封装，具体用法请参考 ")),l("a",Ge,[e[290]||(e[290]=n("LVGL文档")),s(r)])])]),e[445]||(e[445]=t('<h4 id="返回值-35" tabindex="-1"><a class="header-anchor" href="#返回值-35"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrolltoviewrecursive" tabindex="-1"><a class="header-anchor" href="#方法-scrolltoviewrecursive"><span><span class="member-header function"></span> 方法 scrollToViewRecursive</span></a></h3><p>原型: scrollToViewRecursive ()</p>',6)),l("blockquote",null,[l("p",null,[e[295]||(e[295]=n("该方法是对 LVGL C API ")),e[296]||(e[296]=l("code",null,"lv_obj_scroll_to_view_recursive",-1)),e[297]||(e[297]=n(" 的封装，具体用法请参考 ")),l("a",Pe,[e[294]||(e[294]=n("LVGL文档")),s(r)])])]),e[446]||(e[446]=t('<h4 id="返回值-36" tabindex="-1"><a class="header-anchor" href="#返回值-36"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-isscrolling" tabindex="-1"><a class="header-anchor" href="#方法-isscrolling"><span><span class="member-header function"></span> 方法 isScrolling</span></a></h3><p>原型: isScrolling ()</p>',6)),l("blockquote",null,[l("p",null,[e[299]||(e[299]=n("该方法是对 LVGL C API ")),e[300]||(e[300]=l("code",null,"lv_obj_is_scrolling",-1)),e[301]||(e[301]=n(" 的封装，具体用法请参考 ")),l("a",je,[e[298]||(e[298]=n("LVGL文档")),s(r)])])]),e[447]||(e[447]=t('<h4 id="返回值-37" tabindex="-1"><a class="header-anchor" href="#返回值-37"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-updatesnap" tabindex="-1"><a class="header-anchor" href="#方法-updatesnap"><span><span class="member-header function"></span> 方法 updateSnap</span></a></h3><p>原型: updateSnap ()</p>',6)),l("blockquote",null,[l("p",null,[e[303]||(e[303]=n("该方法是对 LVGL C API ")),e[304]||(e[304]=l("code",null,"lv_obj_update_snap",-1)),e[305]||(e[305]=n(" 的封装，具体用法请参考 ")),l("a",Ce,[e[302]||(e[302]=n("LVGL文档")),s(r)])])]),e[448]||(e[448]=t('<h4 id="返回值-38" tabindex="-1"><a class="header-anchor" href="#返回值-38"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scrollbarinvalidate" tabindex="-1"><a class="header-anchor" href="#方法-scrollbarinvalidate"><span><span class="member-header function"></span> 方法 scrollbarInvalidate</span></a></h3><p>原型: scrollbarInvalidate ()</p>',6)),l("blockquote",null,[l("p",null,[e[307]||(e[307]=n("该方法是对 LVGL C API ")),e[308]||(e[308]=l("code",null,"lv_obj_scrollbar_invalidate",-1)),e[309]||(e[309]=n(" 的封装，具体用法请参考 ")),l("a",qe,[e[306]||(e[306]=n("LVGL文档")),s(r)])])]),e[449]||(e[449]=t('<h4 id="返回值-39" tabindex="-1"><a class="header-anchor" href="#返回值-39"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-readjustscroll" tabindex="-1"><a class="header-anchor" href="#方法-readjustscroll"><span><span class="member-header function"></span> 方法 readjustScroll</span></a></h3><p>原型: readjustScroll ()</p>',6)),l("blockquote",null,[l("p",null,[e[311]||(e[311]=n("该方法是对 LVGL C API ")),e[312]||(e[312]=l("code",null,"lv_obj_readjust_scroll",-1)),e[313]||(e[313]=n(" 的封装，具体用法请参考 ")),l("a",we,[e[310]||(e[310]=n("LVGL文档")),s(r)])])]),e[450]||(e[450]=t('<h4 id="返回值-40" tabindex="-1"><a class="header-anchor" href="#返回值-40"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-removestyleall" tabindex="-1"><a class="header-anchor" href="#方法-removestyleall"><span><span class="member-header function"></span> 方法 removeStyleAll</span></a></h3><p>原型: removeStyleAll ()</p>',6)),l("blockquote",null,[l("p",null,[e[315]||(e[315]=n("该方法是对 LVGL C API ")),e[316]||(e[316]=l("code",null,"lv_obj_remove_style_all",-1)),e[317]||(e[317]=n(" 的封装，具体用法请参考 ")),l("a",Se,[e[314]||(e[314]=n("LVGL文档")),s(r)])])]),e[451]||(e[451]=t('<h4 id="返回值-41" tabindex="-1"><a class="header-anchor" href="#返回值-41"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-fadein" tabindex="-1"><a class="header-anchor" href="#方法-fadein"><span><span class="member-header function"></span> 方法 fadeIn</span></a></h3><p>原型: fadeIn ()</p>',6)),l("blockquote",null,[l("p",null,[e[319]||(e[319]=n("该方法是对 LVGL C API ")),e[320]||(e[320]=l("code",null,"lv_obj_fade_in",-1)),e[321]||(e[321]=n(" 的封装，具体用法请参考 ")),l("a",ze,[e[318]||(e[318]=n("LVGL文档")),s(r)])])]),e[452]||(e[452]=t('<h4 id="返回值-42" tabindex="-1"><a class="header-anchor" href="#返回值-42"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-fadeout" tabindex="-1"><a class="header-anchor" href="#方法-fadeout"><span><span class="member-header function"></span> 方法 fadeOut</span></a></h3><p>原型: fadeOut ()</p>',6)),l("blockquote",null,[l("p",null,[e[323]||(e[323]=n("该方法是对 LVGL C API ")),e[324]||(e[324]=l("code",null,"lv_obj_fade_out",-1)),e[325]||(e[325]=n(" 的封装，具体用法请参考 ")),l("a",Te,[e[322]||(e[322]=n("LVGL文档")),s(r)])])]),e[453]||(e[453]=t('<h4 id="返回值-43" tabindex="-1"><a class="header-anchor" href="#返回值-43"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-delete" tabindex="-1"><a class="header-anchor" href="#方法-delete"><span><span class="member-header function"></span> 方法 _delete</span></a></h3><p>原型: _delete ()</p>',6)),l("blockquote",null,[l("p",null,[e[327]||(e[327]=n("该方法是对 LVGL C API ")),e[328]||(e[328]=l("code",null,"lv_obj_delete",-1)),e[329]||(e[329]=n(" 的封装，具体用法请参考 ")),l("a",Ee,[e[326]||(e[326]=n("LVGL文档")),s(r)])])]),e[454]||(e[454]=t('<h4 id="返回值-44" tabindex="-1"><a class="header-anchor" href="#返回值-44"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-clean" tabindex="-1"><a class="header-anchor" href="#方法-clean"><span><span class="member-header function"></span> 方法 clean</span></a></h3><p>原型: clean ()</p>',6)),l("blockquote",null,[l("p",null,[e[331]||(e[331]=n("该方法是对 LVGL C API ")),e[332]||(e[332]=l("code",null,"lv_obj_clean",-1)),e[333]||(e[333]=n(" 的封装，具体用法请参考 ")),l("a",Be,[e[330]||(e[330]=n("LVGL文档")),s(r)])])]),e[455]||(e[455]=t('<h4 id="返回值-45" tabindex="-1"><a class="header-anchor" href="#返回值-45"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-deletedelayed" tabindex="-1"><a class="header-anchor" href="#方法-deletedelayed"><span><span class="member-header function"></span> 方法 deleteDelayed</span></a></h3><p>原型: deleteDelayed ()</p>',6)),l("blockquote",null,[l("p",null,[e[335]||(e[335]=n("该方法是对 LVGL C API ")),e[336]||(e[336]=l("code",null,"lv_obj_delete_delayed",-1)),e[337]||(e[337]=n(" 的封装，具体用法请参考 ")),l("a",Fe,[e[334]||(e[334]=n("LVGL文档")),s(r)])])]),e[456]||(e[456]=t('<h4 id="返回值-46" tabindex="-1"><a class="header-anchor" href="#返回值-46"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-deleteasync" tabindex="-1"><a class="header-anchor" href="#方法-deleteasync"><span><span class="member-header function"></span> 方法 deleteAsync</span></a></h3><p>原型: deleteAsync ()</p>',6)),l("blockquote",null,[l("p",null,[e[339]||(e[339]=n("该方法是对 LVGL C API ")),e[340]||(e[340]=l("code",null,"lv_obj_delete_async",-1)),e[341]||(e[341]=n(" 的封装，具体用法请参考 ")),l("a",Oe,[e[338]||(e[338]=n("LVGL文档")),s(r)])])]),e[457]||(e[457]=t('<h4 id="返回值-47" tabindex="-1"><a class="header-anchor" href="#返回值-47"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-swap" tabindex="-1"><a class="header-anchor" href="#方法-swap"><span><span class="member-header function"></span> 方法 swap</span></a></h3><p>原型: swap ()</p>',6)),l("blockquote",null,[l("p",null,[e[343]||(e[343]=n("该方法是对 LVGL C API ")),e[344]||(e[344]=l("code",null,"lv_obj_swap",-1)),e[345]||(e[345]=n(" 的封装，具体用法请参考 ")),l("a",De,[e[342]||(e[342]=n("LVGL文档")),s(r)])])]),e[458]||(e[458]=t('<h4 id="返回值-48" tabindex="-1"><a class="header-anchor" href="#返回值-48"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-movetoindex" tabindex="-1"><a class="header-anchor" href="#方法-movetoindex"><span><span class="member-header function"></span> 方法 moveToIndex</span></a></h3><p>原型: moveToIndex ()</p>',6)),l("blockquote",null,[l("p",null,[e[347]||(e[347]=n("该方法是对 LVGL C API ")),e[348]||(e[348]=l("code",null,"lv_obj_move_to_index",-1)),e[349]||(e[349]=n(" 的封装，具体用法请参考 ")),l("a",Ne,[e[346]||(e[346]=n("LVGL文档")),s(r)])])]),e[459]||(e[459]=t('<h4 id="返回值-49" tabindex="-1"><a class="header-anchor" href="#返回值-49"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-getchild" tabindex="-1"><a class="header-anchor" href="#方法-getchild"><span><span class="member-header function"></span> 方法 getChild</span></a></h3><p>原型: getChild ()</p>',6)),l("blockquote",null,[l("p",null,[e[351]||(e[351]=n("该方法是对 LVGL C API ")),e[352]||(e[352]=l("code",null,"lv_obj_get_child",-1)),e[353]||(e[353]=n(" 的封装，具体用法请参考 ")),l("a",Re,[e[350]||(e[350]=n("LVGL文档")),s(r)])])]),e[460]||(e[460]=t('<h4 id="返回值-50" tabindex="-1"><a class="header-anchor" href="#返回值-50"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-getsibling" tabindex="-1"><a class="header-anchor" href="#方法-getsibling"><span><span class="member-header function"></span> 方法 getSibling</span></a></h3><p>原型: getSibling ()</p>',6)),l("blockquote",null,[l("p",null,[e[355]||(e[355]=n("该方法是对 LVGL C API ")),e[356]||(e[356]=l("code",null,"lv_obj_get_sibling",-1)),e[357]||(e[357]=n(" 的封装，具体用法请参考 ")),l("a",Xe,[e[354]||(e[354]=n("LVGL文档")),s(r)])])]),e[461]||(e[461]=t('<h4 id="返回值-51" tabindex="-1"><a class="header-anchor" href="#返回值-51"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-dumptree" tabindex="-1"><a class="header-anchor" href="#方法-dumptree"><span><span class="member-header function"></span> 方法 dumpTree</span></a></h3><p>原型: dumpTree ()</p>',6)),l("blockquote",null,[l("p",null,[e[359]||(e[359]=n("该方法是对 LVGL C API ")),e[360]||(e[360]=l("code",null,"lv_obj_dump_tree",-1)),e[361]||(e[361]=n(" 的封装，具体用法请参考 ")),l("a",Ye,[e[358]||(e[358]=n("LVGL文档")),s(r)])])]),e[462]||(e[462]=t('<h4 id="返回值-52" tabindex="-1"><a class="header-anchor" href="#返回值-52"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setflexalign" tabindex="-1"><a class="header-anchor" href="#方法-setflexalign"><span><span class="member-header function"></span> 方法 setFlexAlign</span></a></h3><p>原型: setFlexAlign ()</p>',6)),l("blockquote",null,[l("p",null,[e[363]||(e[363]=n("该方法是对 LVGL C API ")),e[364]||(e[364]=l("code",null,"lv_obj_set_flex_align",-1)),e[365]||(e[365]=n(" 的封装，具体用法请参考 ")),l("a",He,[e[362]||(e[362]=n("LVGL文档")),s(r)])])]),e[463]||(e[463]=t('<h4 id="返回值-53" tabindex="-1"><a class="header-anchor" href="#返回值-53"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setgridalign" tabindex="-1"><a class="header-anchor" href="#方法-setgridalign"><span><span class="member-header function"></span> 方法 setGridAlign</span></a></h3><p>原型: setGridAlign ()</p>',6)),l("blockquote",null,[l("p",null,[e[367]||(e[367]=n("该方法是对 LVGL C API ")),e[368]||(e[368]=l("code",null,"lv_obj_set_grid_align",-1)),e[369]||(e[369]=n(" 的封装，具体用法请参考 ")),l("a",We,[e[366]||(e[366]=n("LVGL文档")),s(r)])])]),e[464]||(e[464]=t('<h4 id="返回值-54" tabindex="-1"><a class="header-anchor" href="#返回值-54"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setgridcell" tabindex="-1"><a class="header-anchor" href="#方法-setgridcell"><span><span class="member-header function"></span> 方法 setGridCell</span></a></h3><p>原型: setGridCell ()</p>',6)),l("blockquote",null,[l("p",null,[e[371]||(e[371]=n("该方法是对 LVGL C API ")),e[372]||(e[372]=l("code",null,"lv_obj_set_grid_cell",-1)),e[373]||(e[373]=n(" 的封装，具体用法请参考 ")),l("a",Me,[e[370]||(e[370]=n("LVGL文档")),s(r)])])]),e[465]||(e[465]=t('<h4 id="返回值-55" tabindex="-1"><a class="header-anchor" href="#返回值-55"><span>返回值:</span></a></h4><p><code>undefined</code></p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-style" tabindex="-1"><a class="header-anchor" href="#方法-style"><span><span class="member-header function"></span> 方法 style</span></a></h3><p>原型: style (styleName:string)</p><p>返回样式的值</p><p>如果样式不存在，抛出异常</p>',8)),l("p",null,[s(p,{to:"/api/lvgl/styles.html#%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7"},{default:o(()=>e[374]||(e[374]=[n("可用的样式参考")])),_:1})]),e[466]||(e[466]=t('<h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">styleName</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>样式名称</p></li></ul><h4 id="返回值-56" tabindex="-1"><a class="header-anchor" href="#返回值-56"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number, string</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-setstyle" tabindex="-1"><a class="header-anchor" href="#方法-setstyle"><span><span class="member-header function"></span> 方法 setStyle</span></a></h3><p>原型: setStyle (style:string|object, value:number|string)</p><p>设置样式</p><p>如果样式不存在，抛出异常。</p>',10)),l("p",null,[s(p,{to:"/api/lvgl/styles.html#%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7"},{default:o(()=>e[375]||(e[375]=[n("可用的样式参考")])),_:1})]),e[467]||(e[467]=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> lv <span class="token keyword">from</span> <span class="token string">&#39;lv&#39;</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> lv<span class="token punctuation">.</span><span class="token function">Obj</span><span class="token punctuation">(</span> lv<span class="token punctuation">.</span><span class="token function">screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>

<span class="token comment">// 对象类型参数，设置多个样式</span>
obj<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;border-width&quot;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">,</span>                 <span class="token comment">// 边线宽</span>
    <span class="token string-property property">&quot;border-color&quot;</span><span class="token operator">:</span> lv<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token comment">// 边线颜色</span>
    <span class="token string-property property">&quot;border-opa&quot;</span><span class="token operator">:</span> <span class="token number">100255</span> <span class="token punctuation">,</span>              <span class="token comment">// 边线不透明度</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 设置单个样式</span>
obj<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">&quot;width&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;100%&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">style</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string, object</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>样式名称或多个样式的对象</p></li><li><p><span style="color:#007acc;">value</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number, string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>样式值，当第一个参数是对象的时候，此参数无效</p></li></ul><h4 id="返回值-57" tabindex="-1"><a class="header-anchor" href="#返回值-57"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number, string</p><p style="height:10px;margin:0px;"></p>`,6))])}const Ue=a(g,[["render",Ze],["__file","Obj.html.vue"]]),$e=JSON.parse('{"path":"/api/lvgl/widgets/Obj.html","title":"类: Obj","lang":"zh-CN","frontmatter":{"headerDepth":2,"description":"类: Obj 类属性 属性 state 类型: number 访问: 只读 该属性是对 LVGL C API lv_obj_get_state 的封装， 具体用法请参考 LVGL文档 属性 eventCount 类型: number 访问: 只读 该属性是对 LVGL C API lv_obj_get_event_count 的封装， 具体用法请参考 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/api/lvgl/widgets/Obj.html"}],["meta",{"property":"og:title","content":"类: Obj"}],["meta",{"property":"og:description","content":"类: Obj 类属性 属性 state 类型: number 访问: 只读 该属性是对 LVGL C API lv_obj_get_state 的封装， 具体用法请参考 LVGL文档 属性 eventCount 类型: number 访问: 只读 该属性是对 LVGL C API lv_obj_get_event_count 的封装， 具体用法请参考 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T15:47:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T15:47:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类: Obj\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-30T15:47:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"类属性","slug":"类属性","link":"#类属性","children":[{"level":3,"title":"属性 state","slug":"属性-state","link":"#属性-state","children":[]},{"level":3,"title":"属性 eventCount","slug":"属性-eventcount","link":"#属性-eventcount","children":[]},{"level":3,"title":"属性 x","slug":"属性-x","link":"#属性-x","children":[]},{"level":3,"title":"属性 y","slug":"属性-y","link":"#属性-y","children":[]},{"level":3,"title":"属性 width","slug":"属性-width","link":"#属性-width","children":[]},{"level":3,"title":"属性 height","slug":"属性-height","link":"#属性-height","children":[]},{"level":3,"title":"属性 contentWidth","slug":"属性-contentwidth","link":"#属性-contentwidth","children":[]},{"level":3,"title":"属性 contentHeight","slug":"属性-contentheight","link":"#属性-contentheight","children":[]},{"level":3,"title":"属性 layout","slug":"属性-layout","link":"#属性-layout","children":[]},{"level":3,"title":"属性 align","slug":"属性-align","link":"#属性-align","children":[]},{"level":3,"title":"属性 xAligned","slug":"属性-xaligned","link":"#属性-xaligned","children":[]},{"level":3,"title":"属性 yAligned","slug":"属性-yaligned","link":"#属性-yaligned","children":[]},{"level":3,"title":"属性 selfWidth","slug":"属性-selfwidth","link":"#属性-selfwidth","children":[]},{"level":3,"title":"属性 selfHeight","slug":"属性-selfheight","link":"#属性-selfheight","children":[]},{"level":3,"title":"属性 extClickArea","slug":"属性-extclickarea","link":"#属性-extclickarea","children":[]},{"level":3,"title":"属性 scrollbarMode","slug":"属性-scrollbarmode","link":"#属性-scrollbarmode","children":[]},{"level":3,"title":"属性 scrollDir","slug":"属性-scrolldir","link":"#属性-scrolldir","children":[]},{"level":3,"title":"属性 scrollSnapX","slug":"属性-scrollsnapx","link":"#属性-scrollsnapx","children":[]},{"level":3,"title":"属性 scrollSnapY","slug":"属性-scrollsnapy","link":"#属性-scrollsnapy","children":[]},{"level":3,"title":"属性 scrollX","slug":"属性-scrollx","link":"#属性-scrollx","children":[]},{"level":3,"title":"属性 scrollY","slug":"属性-scrolly","link":"#属性-scrolly","children":[]},{"level":3,"title":"属性 scrollTop","slug":"属性-scrolltop","link":"#属性-scrolltop","children":[]},{"level":3,"title":"属性 scrollBottom","slug":"属性-scrollbottom","link":"#属性-scrollbottom","children":[]},{"level":3,"title":"属性 scrollLeft","slug":"属性-scrollleft","link":"#属性-scrollleft","children":[]},{"level":3,"title":"属性 scrollRight","slug":"属性-scrollright","link":"#属性-scrollright","children":[]},{"level":3,"title":"属性 parent","slug":"属性-parent","link":"#属性-parent","children":[]},{"level":3,"title":"属性 screen","slug":"属性-screen","link":"#属性-screen","children":[]},{"level":3,"title":"属性 childCount","slug":"属性-childcount","link":"#属性-childcount","children":[]},{"level":3,"title":"属性 index","slug":"属性-index","link":"#属性-index","children":[]},{"level":3,"title":"属性 flexFlow","slug":"属性-flexflow","link":"#属性-flexflow","children":[]},{"level":3,"title":"属性 flexGrow","slug":"属性-flexgrow","link":"#属性-flexgrow","children":[]}]},{"level":2,"title":"类方法","slug":"类方法","link":"#类方法","children":[{"level":3,"title":"方法  addFlag","slug":"方法-addflag","link":"#方法-addflag","children":[]},{"level":3,"title":"方法  removeFlag","slug":"方法-removeflag","link":"#方法-removeflag","children":[]},{"level":3,"title":"方法  updateFlag","slug":"方法-updateflag","link":"#方法-updateflag","children":[]},{"level":3,"title":"方法  addState","slug":"方法-addstate","link":"#方法-addstate","children":[]},{"level":3,"title":"方法  removeState","slug":"方法-removestate","link":"#方法-removestate","children":[]},{"level":3,"title":"方法  setState","slug":"方法-setstate","link":"#方法-setstate","children":[]},{"level":3,"title":"方法  hasFlag","slug":"方法-hasflag","link":"#方法-hasflag","children":[]},{"level":3,"title":"方法  hasFlagAny","slug":"方法-hasflagany","link":"#方法-hasflagany","children":[]},{"level":3,"title":"方法  hasState","slug":"方法-hasstate","link":"#方法-hasstate","children":[]},{"level":3,"title":"方法  allocateSpecAttr","slug":"方法-allocatespecattr","link":"#方法-allocatespecattr","children":[]},{"level":3,"title":"方法  isValid","slug":"方法-isvalid","link":"#方法-isvalid","children":[]},{"level":3,"title":"方法  classInitObj","slug":"方法-classinitobj","link":"#方法-classinitobj","children":[]},{"level":3,"title":"方法  isEditable","slug":"方法-iseditable","link":"#方法-iseditable","children":[]},{"level":3,"title":"方法  isGroupDef","slug":"方法-isgroupdef","link":"#方法-isgroupdef","children":[]},{"level":3,"title":"方法  calculateExtDrawSize","slug":"方法-calculateextdrawsize","link":"#方法-calculateextdrawsize","children":[]},{"level":3,"title":"方法  refreshExtDrawSize","slug":"方法-refreshextdrawsize","link":"#方法-refreshextdrawsize","children":[]},{"level":3,"title":"方法  removeEvent","slug":"方法-removeevent","link":"#方法-removeevent","children":[]},{"level":3,"title":"方法  setPos","slug":"方法-setpos","link":"#方法-setpos","children":[]},{"level":3,"title":"方法  setSize","slug":"方法-setsize","link":"#方法-setsize","children":[]},{"level":3,"title":"方法  refrSize","slug":"方法-refrsize","link":"#方法-refrsize","children":[]},{"level":3,"title":"方法  isLayoutPositioned","slug":"方法-islayoutpositioned","link":"#方法-islayoutpositioned","children":[]},{"level":3,"title":"方法  markLayoutAsDirty","slug":"方法-marklayoutasdirty","link":"#方法-marklayoutasdirty","children":[]},{"level":3,"title":"方法  updateLayout","slug":"方法-updatelayout","link":"#方法-updatelayout","children":[]},{"level":3,"title":"方法  alignTo","slug":"方法-alignto","link":"#方法-alignto","children":[]},{"level":3,"title":"方法  refreshSelfSize","slug":"方法-refreshselfsize","link":"#方法-refreshselfsize","children":[]},{"level":3,"title":"方法  refrPos","slug":"方法-refrpos","link":"#方法-refrpos","children":[]},{"level":3,"title":"方法  moveTo","slug":"方法-moveto","link":"#方法-moveto","children":[]},{"level":3,"title":"方法  moveChildrenBy","slug":"方法-movechildrenby","link":"#方法-movechildrenby","children":[]},{"level":3,"title":"方法  invalidate","slug":"方法-invalidate","link":"#方法-invalidate","children":[]},{"level":3,"title":"方法  isVisible","slug":"方法-isvisible","link":"#方法-isvisible","children":[]},{"level":3,"title":"方法  scrollBy","slug":"方法-scrollby","link":"#方法-scrollby","children":[]},{"level":3,"title":"方法  scrollByBounded","slug":"方法-scrollbybounded","link":"#方法-scrollbybounded","children":[]},{"level":3,"title":"方法  scrollTo","slug":"方法-scrollto","link":"#方法-scrollto","children":[]},{"level":3,"title":"方法  scrollToX","slug":"方法-scrolltox","link":"#方法-scrolltox","children":[]},{"level":3,"title":"方法  scrollToY","slug":"方法-scrolltoy","link":"#方法-scrolltoy","children":[]},{"level":3,"title":"方法  scrollToView","slug":"方法-scrolltoview","link":"#方法-scrolltoview","children":[]},{"level":3,"title":"方法  scrollToViewRecursive","slug":"方法-scrolltoviewrecursive","link":"#方法-scrolltoviewrecursive","children":[]},{"level":3,"title":"方法  isScrolling","slug":"方法-isscrolling","link":"#方法-isscrolling","children":[]},{"level":3,"title":"方法  updateSnap","slug":"方法-updatesnap","link":"#方法-updatesnap","children":[]},{"level":3,"title":"方法  scrollbarInvalidate","slug":"方法-scrollbarinvalidate","link":"#方法-scrollbarinvalidate","children":[]},{"level":3,"title":"方法  readjustScroll","slug":"方法-readjustscroll","link":"#方法-readjustscroll","children":[]},{"level":3,"title":"方法  removeStyleAll","slug":"方法-removestyleall","link":"#方法-removestyleall","children":[]},{"level":3,"title":"方法  fadeIn","slug":"方法-fadein","link":"#方法-fadein","children":[]},{"level":3,"title":"方法  fadeOut","slug":"方法-fadeout","link":"#方法-fadeout","children":[]},{"level":3,"title":"方法  _delete","slug":"方法-delete","link":"#方法-delete","children":[]},{"level":3,"title":"方法  clean","slug":"方法-clean","link":"#方法-clean","children":[]},{"level":3,"title":"方法  deleteDelayed","slug":"方法-deletedelayed","link":"#方法-deletedelayed","children":[]},{"level":3,"title":"方法  deleteAsync","slug":"方法-deleteasync","link":"#方法-deleteasync","children":[]},{"level":3,"title":"方法  swap","slug":"方法-swap","link":"#方法-swap","children":[]},{"level":3,"title":"方法  moveToIndex","slug":"方法-movetoindex","link":"#方法-movetoindex","children":[]},{"level":3,"title":"方法  getChild","slug":"方法-getchild","link":"#方法-getchild","children":[]},{"level":3,"title":"方法  getSibling","slug":"方法-getsibling","link":"#方法-getsibling","children":[]},{"level":3,"title":"方法  dumpTree","slug":"方法-dumptree","link":"#方法-dumptree","children":[]},{"level":3,"title":"方法  setFlexAlign","slug":"方法-setflexalign","link":"#方法-setflexalign","children":[]},{"level":3,"title":"方法  setGridAlign","slug":"方法-setgridalign","link":"#方法-setgridalign","children":[]},{"level":3,"title":"方法  setGridCell","slug":"方法-setgridcell","link":"#方法-setgridcell","children":[]},{"level":3,"title":"方法  style","slug":"方法-style","link":"#方法-style","children":[]},{"level":3,"title":"方法  setStyle","slug":"方法-setstyle","link":"#方法-setstyle","children":[]}]}],"git":{"createdTime":1714757277000,"updatedTime":1717084071000,"contributors":[{"name":"alee","email":"alee@chou.im","commits":5},{"name":"alee","email":"alee_zhou@seminstructs.com","commits":1}]},"readingTime":{"minutes":16.96,"words":5089},"filePathRelative":"api/lvgl/widgets/Obj.md","localizedDate":"2024年5月4日","autoDesc":true}');export{Ue as comp,$e as data};
