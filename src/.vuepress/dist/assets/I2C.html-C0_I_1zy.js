import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as t,c as l,a as n,b as s,d as i,w as r,e as o}from"./app-ChgrVHeb.js";const c={},d=n("h1",{id:"类-i2c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类-i2c"},[n("span",null,"类: I2C")])],-1),h=n("p",null,"该类的构造函数没有绑定给 JS , 无法从 JS 创建实例。",-1),u=n("code",null,"import serial",-1),m=o(`<h2 id="类方法" tabindex="-1"><a class="header-anchor" href="#类方法"><span>类方法</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="方法-setup" tabindex="-1"><a class="header-anchor" href="#方法-setup"><span><span class="member-header function"></span> 方法 setup</span></a></h3><p>原型: setup (options:object)</p><p>设置 i2c 外设, 若遇到错误则抛出异常</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>options<span class="token operator">:</span> <span class="token punctuation">{</span>
  sda<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  scl<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  mode<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  rx_buffer_len<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  tx_buffer_len<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  freq<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">400000</span>
  addr_10bit_en<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
  slave_addr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
  timeout<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">options</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>object</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span></p></li></ul><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-ping" tabindex="-1"><a class="header-anchor" href="#方法-ping"><span><span class="member-header function"></span> 方法 ping</span></a></h3><p>原型: ping (addr:number)</p><p>测试总线上的设备是否存在</p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">addr</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>设备地址</p></li></ul><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p>true 表示该地址上设备存在，false 表示不存在</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-scan" tabindex="-1"><a class="header-anchor" href="#方法-scan"><span><span class="member-header function"></span> 方法 scan</span></a></h3><p>原型: scan (from:number=0, to:number=127)</p><p>在总线上扫描设备给定地址范围的所有设备，在控制台上输出存在的地址</p><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">from=0</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>默认值</strong></span>0</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>起始地址</p></li><li><p><span style="color:#007acc;">to=127</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>默认值</strong></span>127</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>结束地址</p></li></ul><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-send" tabindex="-1"><a class="header-anchor" href="#方法-send"><span><span class="member-header function"></span> 方法 send</span></a></h3><p>原型: send (addr:number, data:number[]|ArrayBuffer)</p><p>在总线上向指定设备发送数据</p><p>参数 <code>data</code> 可以是 ArrayBuffer 对象, 也可以是字节数值的数值, 例如：[0x1, 0x2, 0x3]</p><ul><li>发送数据后，接收到设备的 ack 回应则返回 true</li><li>否则返回 false (总线上设备可能不存在)</li><li>其他错误抛出异常</li></ul><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">addr</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>设备地址</p></li><li><p><span style="color:#007acc;">data</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number[], ArrayBuffer</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>字节数据</p></li></ul><h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>bool</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-recv" tabindex="-1"><a class="header-anchor" href="#方法-recv"><span><span class="member-header function"></span> 方法 recv</span></a></h3><p>原型: recv (addr:number, length:number)</p><p>在总线上从指定地址(参数<code>addr</code>)的设备, 接收指定长度(参数<code>length</code>)的数据</p><ul><li>接收到的数据以 ArrayBuffer 对象返回</li><li>如果总线上设备不存在则返回 null</li><li>其他错误抛出异常</li></ul><h4 id="参数-4" tabindex="-1"><a class="header-anchor" href="#参数-4"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">addr</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>设备地址</p></li><li><p><span style="color:#007acc;">length</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>接收数据的长度</p></li></ul><h4 id="返回值-4" tabindex="-1"><a class="header-anchor" href="#返回值-4"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>ArrayBuffer, null</p><p style="height:10px;margin:0px;"></p>`,51);function b(g,y){const a=p("RouteLink");return t(),l("div",null,[d,h,n("p",null,[s("模块 "),i(a,{to:"/api/serial/overview.html"},{default:r(()=>[s("serial")]),_:1}),s(" 创建了和硬件对应的 I2C 实例，"),u,s(" 即可。")]),m])}const f=e(c,[["render",b],["__file","I2C.html.vue"]]),v=JSON.parse('{"path":"/api/serial/I2C.html","title":"类: I2C","lang":"zh-CN","frontmatter":{"headerDepth":2,"description":"类: I2C 该类的构造函数没有绑定给 JS , 无法从 JS 创建实例。 模块 创建了和硬件对应的 I2C 实例，import serial 即可。 类方法 方法 setup 原型: setup (options:object) 设置 i2c 外设, 若遇到错误则抛出异常 参数: options 类型object 参数说明 返回值: 类型undefi...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/api/serial/I2C.html"}],["meta",{"property":"og:title","content":"类: I2C"}],["meta",{"property":"og:description","content":"类: I2C 该类的构造函数没有绑定给 JS , 无法从 JS 创建实例。 模块 创建了和硬件对应的 I2C 实例，import serial 即可。 类方法 方法 setup 原型: setup (options:object) 设置 i2c 外设, 若遇到错误则抛出异常 参数: options 类型object 参数说明 返回值: 类型undefi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T14:12:34.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-05T14:12:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类: I2C\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T14:12:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"类方法","slug":"类方法","link":"#类方法","children":[{"level":3,"title":"方法  setup","slug":"方法-setup","link":"#方法-setup","children":[]},{"level":3,"title":"方法  ping","slug":"方法-ping","link":"#方法-ping","children":[]},{"level":3,"title":"方法  scan","slug":"方法-scan","link":"#方法-scan","children":[]},{"level":3,"title":"方法  send","slug":"方法-send","link":"#方法-send","children":[]},{"level":3,"title":"方法  recv","slug":"方法-recv","link":"#方法-recv","children":[]}]}],"git":{"createdTime":1714918354000,"updatedTime":1714918354000,"contributors":[{"name":"alee","email":"alee@chou.im","commits":1}]},"readingTime":{"minutes":2.75,"words":826},"filePathRelative":"api/serial/I2C.md","localizedDate":"2024年5月5日","autoDesc":true}');export{f as comp,v as data};
