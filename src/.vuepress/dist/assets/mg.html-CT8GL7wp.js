import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as r,c as d,a as c,w as s,b as e,d as n,e as o}from"./app-DuvumQGL.js";const h={},g=e("h1",{id:"模块-mg",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#模块-mg"},[e("span",null,"模块: mg")])],-1),m=e("p",null,[n("导入 "),e("code",null,"mg"),n(" 模块：")],-1),u=e("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"import"),n(),e("span",{class:"token operator"},"*"),n(),e("span",{class:"token keyword"},"as"),n(" wifi "),e("span",{class:"token keyword"},"from"),n(),e("span",{class:"token string"},"'mg'"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),v=e("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"import"),n(` mg
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),b=o(`<h2 id="模块函数" tabindex="-1"><a class="header-anchor" href="#模块函数"><span>模块函数</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="函数-listenhttp" tabindex="-1"><a class="header-anchor" href="#函数-listenhttp"><span><span class="member-header function"></span> 函数 listenHttp</span></a></h3><p>原型: listenHttp (addrOrOptions:object|string, callback:function)</p><p>创建一个处理 http 协议的服务器对象</p><p>第一个参数可以是 [ip:port] 格式的字符串表示服务器地址，例如 <code>&quot;0.0.0.0:8080&quot;</code></p><p>第一个参数也可以是一个对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
    addr: string ,
    ssl: boolean ,
    callback: (ev:string, req, rspn)=&gt;void
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调函数的原型：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>callback(event:string, request:HTTPRequest, response:Response): void
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 event 表示事件类型，有以下事件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>error: 发生错误
open: 客户端连接
poll: 轮询事件
resolve: 域名解析完成
connect: 客户端连接建立完成
accept: 客户端连接接受完成
read: 客户端数据接收完成
write: 客户端数据发送完成
close: 客户端连接关闭
http.msg: HTTP 请求/响应消息接收完成
ws.open: WebSocket 握手完成
ws.msg: WebSocket 消息接收完成
ws.ctl: WebSocket 控制消息接收完成
mqtt.cmd: MQTT 低级命令接收完成
mqtt.msg: MQTT PUBLISH 消息接收完成
mqtt.open: MQTT CONNACK 接收完成
sntp.time: SNTP 时间接收完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">addrOrOptions</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>object, string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>该参数可以是 [ip:port] 格式的字符串表示服务器地址，或选项对象</p></li><li><p><span style="color:#007acc;">callback</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>function</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>服务器事件回调函数，该函数接收三个参数：事件名称、请求对象、响应对象</p></li></ul><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>Server</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-connpeer" tabindex="-1"><a class="header-anchor" href="#函数-connpeer"><span><span class="member-header function"></span> 函数 connPeer</span></a></h3><p>原型: connPeer (idx:number)</p><p>返回指定客户端连接的对端地址 [ip:port]</p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">idx</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>表示第几个客户端</p></li></ul><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>string</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-conncount" tabindex="-1"><a class="header-anchor" href="#函数-conncount"><span><span class="member-header function"></span> 函数 connCount</span></a></h3><p>原型: connCount ()</p><p>连接到服务器的客户端数量</p><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-getdns" tabindex="-1"><a class="header-anchor" href="#函数-getdns"><span><span class="member-header function"></span> 函数 getDNS</span></a></h3><p>原型: getDNS ()</p><p>返回当前 dns 服务器地址</p><h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>string</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-getdns-1" tabindex="-1"><a class="header-anchor" href="#函数-getdns-1"><span><span class="member-header function"></span> 函数 getDNS</span></a></h3><p>原型: getDNS (url:string)</p><p>解析 URL 字符串，返回对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
    host: string ,
    port: number ,
    uri: string
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">url</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>要解析的 URL 字符串</p></li></ul><h4 id="返回值-4" tabindex="-1"><a class="header-anchor" href="#返回值-4"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-setlog" tabindex="-1"><a class="header-anchor" href="#函数-setlog"><span><span class="member-header function"></span> 函数 setLog</span></a></h3><p>原型: setLog (log:string)</p><p>设置 mg 的日志级别</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
    host: string ,
    port: number ,
    uri: string
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">log</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>日志级别</p></li></ul><h4 id="返回值-5" tabindex="-1"><a class="header-anchor" href="#返回值-5"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p>`,60);function x(y,f){const i=p("CodeTabs");return r(),d("div",null,[g,m,c(i,{id:"6",data:[{id:"在.js文件中"},{id:"在REPL命令行下"}]},{title0:s(({value:a,isActive:t})=>[n("在.js文件中")]),title1:s(({value:a,isActive:t})=>[n("在REPL命令行下")]),tab0:s(({value:a,isActive:t})=>[u]),tab1:s(({value:a,isActive:t})=>[v]),_:1}),b])}const _=l(h,[["render",x],["__file","mg.html.vue"]]),T=JSON.parse('{"path":"/api/mg.html","title":"模块: mg","lang":"zh-CN","frontmatter":{"headerDepth":2,"description":"模块: mg 导入 mg 模块： 模块函数 函数 listenHttp 原型: listenHttp (addrOrOptions:object|string, callback:function) 创建一个处理 http 协议的服务器对象 第一个参数可以是 [ip:port] 格式的字符串表示服务器地址，例如 \\"0.0.0.0:8080\\" 第一个参数...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/api/mg.html"}],["meta",{"property":"og:title","content":"模块: mg"}],["meta",{"property":"og:description","content":"模块: mg 导入 mg 模块： 模块函数 函数 listenHttp 原型: listenHttp (addrOrOptions:object|string, callback:function) 创建一个处理 http 协议的服务器对象 第一个参数可以是 [ip:port] 格式的字符串表示服务器地址，例如 \\"0.0.0.0:8080\\" 第一个参数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-03T17:27:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-03T17:27:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块: mg\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-03T17:27:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模块函数","slug":"模块函数","link":"#模块函数","children":[{"level":3,"title":"函数  listenHttp","slug":"函数-listenhttp","link":"#函数-listenhttp","children":[]},{"level":3,"title":"函数  connPeer","slug":"函数-connpeer","link":"#函数-connpeer","children":[]},{"level":3,"title":"函数  connCount","slug":"函数-conncount","link":"#函数-conncount","children":[]},{"level":3,"title":"函数  getDNS","slug":"函数-getdns","link":"#函数-getdns","children":[]},{"level":3,"title":"函数  getDNS","slug":"函数-getdns-1","link":"#函数-getdns-1","children":[]},{"level":3,"title":"函数  setLog","slug":"函数-setlog","link":"#函数-setlog","children":[]}]}],"git":{"createdTime":1714757277000,"updatedTime":1714757277000,"contributors":[{"name":"alee","email":"alee@chou.im","commits":1}]},"readingTime":{"minutes":2.8,"words":841},"filePathRelative":"api/mg.md","localizedDate":"2024年5月4日","autoDesc":true}');export{_ as comp,T as data};
