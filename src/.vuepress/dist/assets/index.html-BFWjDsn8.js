import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as h,c as u,a,w as e,b as n,d as s,e as p}from"./app-DuvumQGL.js";const g={},m=n("h1",{id:"模块-mg",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模块-mg"},[n("span",null,"模块: mg")])],-1),b=n("p",null,[s("导入 "),n("code",null,"mg"),s(" 模块：")],-1),v=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token keyword"},"as"),s(" wifi "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'mg'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),k=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(` mg
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),x={href:"https://mongoose.ws",target:"_blank",rel:"noopener noreferrer"},y=p(`<h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>error: 发生错误
open: 客户端连接
poll: 轮询事件
resolve: 域名解析完成
connect: 客户端连接建立完成
accept: 客户端连接接受完成
read: 客户端数据接收完成
write: 客户端数据发送完成
close: 客户端连接关闭
http.msg: HTTP 请求/响应消息接收完成
ws.open: WebSocket 握手完成
ws.msg: WebSocket 消息接收完成
ws.ctl: WebSocket 控制消息接收完成
mqtt.cmd: MQTT 低级命令接收完成
mqtt.msg: MQTT PUBLISH 消息接收完成
mqtt.open: MQTT CONNACK 接收完成
sntp.time: SNTP 时间接收完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块函数" tabindex="-1"><a class="header-anchor" href="#模块函数"><span>模块函数</span></a></h2><p style="height:10px;margin:0px;"></p><h3 id="函数-listenhttp" tabindex="-1"><a class="header-anchor" href="#函数-listenhttp"><span><span class="member-header function"></span> 函数 listenHttp</span></a></h3><p>原型: listenHttp (addrOrOptions:string|object, callback:function)</p><p>创建一个处理 http 协议的服务器实例。</p>`,7),f=p(`<p>第一个参数可以是 [ip:port] 格式的字符串表示服务器地址，例如 <code>&quot;0.0.0.0:8080&quot;</code></p><p>第一个参数也可以是一个对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    addr<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">,</span>
    ssl<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">,</span>
    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>ev<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> rspn<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调函数的原型：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> request<span class="token operator">:</span>HTTPRequest<span class="token punctuation">,</span> response<span class="token operator">:</span>Response<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 event 参数参考：<a href="#%E4%BA%8B%E4%BB%B6">mg 事件</a></p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">addrOrOptions</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string, object</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>该参数可以是 [ip:port] 格式的字符串表示服务器地址，或选项对象</p></li><li><p><span style="color:#007acc;">callback</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>function</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>服务器事件回调函数，该函数接收三个参数：事件名称、请求对象、响应对象</p></li></ul><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值:</span></a></h4>`,9),_=n("span",{style:{display:"inline-block",width:"100px","margin-left":"20px"}},[n("strong",null,"类型")],-1),w=p(`<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="方法-connect" tabindex="-1"><a class="header-anchor" href="#方法-connect"><span><span class="member-header function"></span> 方法 connect</span></a></h3><p>原型: connect (url:string, callback:function)</p><p>创建并执行一个客户端连接</p><p>该函数的第一个参数是连接地址，第二个参数是一个回调函数，该函数接收三个参数：事件名称、请求对象。</p><p>回调函数的原型:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> request<span class="token operator">:</span>HTTPRequest<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 event 参数参考：<a href="#%E4%BA%8B%E4%BB%B6">mg 事件</a></p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">url</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>连接地址，例如 <code>&quot;http://www.example.com/path&quot;</code></p></li><li><p><span style="color:#007acc;">callback</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>function</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>事件回调函数</p></li></ul><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1"><span>返回值:</span></a></h4>`,12),T=n("span",{style:{display:"inline-block",width:"100px","margin-left":"20px"}},[n("strong",null,"类型")],-1),S=p(`<p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-connpeer" tabindex="-1"><a class="header-anchor" href="#函数-connpeer"><span><span class="member-header function"></span> 函数 connPeer</span></a></h3><p>原型: connPeer (idx:number)</p><p>返回指定客户端连接的对端地址 [ip:port]</p><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">idx</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>number</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>表示第几个客户端</p></li></ul><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>string</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-conncount" tabindex="-1"><a class="header-anchor" href="#函数-conncount"><span><span class="member-header function"></span> 函数 connCount</span></a></h3><p>原型: connCount ()</p><p>连接到服务器的客户端数量</p><h4 id="返回值-3" tabindex="-1"><a class="header-anchor" href="#返回值-3"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>number</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-getdns" tabindex="-1"><a class="header-anchor" href="#函数-getdns"><span><span class="member-header function"></span> 函数 getDNS</span></a></h3><p>原型: getDNS ()</p><p>返回当前 dns 服务器地址</p><h4 id="返回值-4" tabindex="-1"><a class="header-anchor" href="#返回值-4"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>string</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-parseurl" tabindex="-1"><a class="header-anchor" href="#函数-parseurl"><span><span class="member-header function"></span> 函数 parseUrl</span></a></h3><p>原型: parseUrl (url:string)</p><p>解析 URL 字符串，返回对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    host<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">,</span>
    uri<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">url</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>要解析的 URL 字符串</p></li></ul><h4 id="返回值-5" tabindex="-1"><a class="header-anchor" href="#返回值-5"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>object</p><p style="height:10px;margin:0px;"></p><p style="height:10px;margin:0px;"></p><h3 id="函数-setlog" tabindex="-1"><a class="header-anchor" href="#函数-setlog"><span><span class="member-header function"></span> 函数 setLog</span></a></h3><p>原型: setLog (log:string)</p><p>设置 mg 的日志级别</p><h4 id="参数-4" tabindex="-1"><a class="header-anchor" href="#参数-4"><span>参数:</span></a></h4><ul><li><p><span style="color:#007acc;">log</span></p><p><span style="display:inline-block;width:100px;"><strong>类型</strong></span>string</p><p><span style="display:inline-block;width:100px;"><strong>参数说明</strong></span>日志级别</p></li></ul><h4 id="返回值-6" tabindex="-1"><a class="header-anchor" href="#返回值-6"><span>返回值:</span></a></h4><p><span style="display:inline-block;width:100px;margin-left:20px;"><strong>类型</strong></span>undefined</p><p style="height:10px;margin:0px;"></p>`,43);function P(B,E){const r=o("CodeTabs"),c=o("ExternalLinkIcon"),t=o("RouteLink");return h(),u("div",null,[m,b,a(r,{id:"6",data:[{id:"在.js文件中"},{id:"在REPL命令行下"}]},{title0:e(({value:i,isActive:l})=>[s("在.js文件中")]),title1:e(({value:i,isActive:l})=>[s("在REPL命令行下")]),tab0:e(({value:i,isActive:l})=>[v]),tab1:e(({value:i,isActive:l})=>[k]),_:1}),n("p",null,[s("BeShell 集成了 "),n("a",x,[s("Mongoose 库"),a(c)]),s("，用来处理网络应用层的协议，包括 HTTP(S)、WebSocket、MQTT、SNTP、SMTP 等。")]),n("p",null,[s("关于 mg 模块的例子请参考: "),a(t,{to:"/guide/http-server.html"},{default:e(()=>[s("在 ESP32 上用 JavaScript 开发 WEB 后端")]),_:1})]),y,n("p",null,[s("此函数的例子参考："),a(t,{to:"/guide/http-server.html#_2-%E7%AE%80%E5%8D%95-http-web-%E5%90%8E%E7%AB%AF%E7%9A%84%E4%BE%8B%E5%AD%90"},{default:e(()=>[s("简单 HTTP Web 后端的例子")]),_:1})]),f,n("p",null,[_,a(t,{to:"/api/mg/Server.html"},{default:e(()=>[s("Server")]),_:1})]),w,n("p",null,[T,a(t,{to:"/api/mg/Client.html"},{default:e(()=>[s("Client")]),_:1})]),S])}const H=d(g,[["render",P],["__file","index.html.vue"]]),A=JSON.parse('{"path":"/api/mg/","title":"模块: mg","lang":"zh-CN","frontmatter":{"headerDepth":2,"description":"模块: mg 导入 mg 模块： BeShell 集成了 Mongoose 库，用来处理网络应用层的协议，包括 HTTP(S)、WebSocket、MQTT、SNTP、SMTP 等。 关于 mg 模块的例子请参考: 事件 模块函数 函数 listenHttp 原型: listenHttp (addrOrOptions:string|object, ca...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/api/mg/"}],["meta",{"property":"og:title","content":"模块: mg"}],["meta",{"property":"og:description","content":"模块: mg 导入 mg 模块： BeShell 集成了 Mongoose 库，用来处理网络应用层的协议，包括 HTTP(S)、WebSocket、MQTT、SNTP、SMTP 等。 关于 mg 模块的例子请参考: 事件 模块函数 函数 listenHttp 原型: listenHttp (addrOrOptions:string|object, ca..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块: mg\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"模块函数","slug":"模块函数","link":"#模块函数","children":[{"level":3,"title":"函数  listenHttp","slug":"函数-listenhttp","link":"#函数-listenhttp","children":[]},{"level":3,"title":"方法  connect","slug":"方法-connect","link":"#方法-connect","children":[]},{"level":3,"title":"函数  connPeer","slug":"函数-connpeer","link":"#函数-connpeer","children":[]},{"level":3,"title":"函数  connCount","slug":"函数-conncount","link":"#函数-conncount","children":[]},{"level":3,"title":"函数  getDNS","slug":"函数-getdns","link":"#函数-getdns","children":[]},{"level":3,"title":"函数  parseUrl","slug":"函数-parseurl","link":"#函数-parseurl","children":[]},{"level":3,"title":"函数  setLog","slug":"函数-setlog","link":"#函数-setlog","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.82,"words":1145},"filePathRelative":"api/mg/index.md","autoDesc":true}');export{H as comp,A as data};
